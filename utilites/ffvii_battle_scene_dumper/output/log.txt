Loading file: scene77
Enemy Id and Data
01) ID 0016: MP 
level            02
speed            50
luck             04
physical dodge   00
strength         06
physical defense 02
magic power      00
magic defense    00
element id's: 255 255 255 255 255 255 255 255
effects:      255 255 255 255 255 255 255 255
action id:  03 04 ff ff ff ff ff ff ff ff ff ff ff ff ff ff
attack id:  0272 0273 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001
camera movement:  -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001
drop/stole rates:   08   88   ff   ff
drop/stole items: 0000 0020 -001 -001
manipulate attacks id:  0272 0273 -001 -001
MP: 0000
AP: 0002
Morph item id: 0000
Damage From Back multiplied by: 16/8
Unknown: ff
HP: 00030
EXP: 00016
GIL: 00010
Immune mask: ffffffff
unknown:  ff ff ff ff
AI:
script 1:
0x0000 [0x0004 + 0x00] = b(0x00);
0x0006 [0x0008 + 0x00] = b(0x00);
0x000c [0x0000 + 0x00] = b(0x00);
0x0012 JumpIfNotAllFriendsInFrontRow(0x0029);
0x001f [0x0008 + 0x00] = b(b[0x0008 + 0x00] & 0x01);
0x0029 JumpIfNotAllFriendsInBackRow(0x0040);
0x0036 [0x0008 + 0x00] = b(b[0x0008 + 0x00] & 0x02);
0x0040 JumpIfNotAllOpponentsInFrontRow(0x0057);
0x004d [0x0004 + 0x00] = b(b[0x0004 + 0x00] & 0x01);
0x0057 JumpIfNotAllOpponentsInBackRow(0x006e);
0x0064 [0x0004 + 0x00] = b(b[0x0004 + 0x00] & 0x02);
0x006e JumpIfSelfNotInFrontRow(0x0084);
0x007b [0x0000 + 0x00] = b(0x00);
0x0081 0x72 JumpTo(0x008a)
0x0084 [0x0000 + 0x00] = b(0x01);
0x008a JumpIfTrue(b[0x0000 + 0x00])(0x01f5);
0x0091 0x01 LoadValue(0x0020)
0x0094 0x60 PushImmediate(0x01)
0x0096 0x71 JumpIfNotEqual(0x010b)
0x0099 [0x000c + 0x00] = b(0x04);
0x009f JumpIfRandomNot(1/b[0x000c + 0x00])(0x00d8);
0x00a8 JumpIf((b[0x0004 + 0x00] & 0x02) != 0x02)(0x00c6);
0x00b4 SetRandomOpponentInBackRowToAttack();
0x00c3 0x72 JumpTo(0x00ce)
0x00c6 SetRandomOpponentToAttack();
0x00ce [0x0010 + 0x00] = h(0x0110);
0x00d5 0x72 JumpTo(0x0105)
0x00d8 JumpIf((b[0x0004 + 0x00] & 0x01) != 0x01)(0x00f6);
0x00e4 SetRandomOpponentInFrontRowToAttack();
0x00f3 0x72 JumpTo(0x00fe)
0x00f6 SetRandomOpponentToAttack();
0x00fe [0x0010 + 0x00] = h(0x0111);
0x0105 0x72 JumpTo(0x01f1)
0x0108 0x72 JumpTo(0x0110)
0x010b 0x60 PushImmediate(0x02)
0x010d 0x71 JumpIfNotEqual(0x0182)
0x0110 [0x000c + 0x00] = b(0x08);
0x0116 JumpIfRandomNot(1/b[0x000c + 0x00])(0x014f);
0x011f JumpIf((b[0x0004 + 0x00] & 0x01) != 0x01)(0x013d);
0x012b SetRandomOpponentInFrontRowToAttack();
0x013a 0x72 JumpTo(0x0145)
0x013d SetRandomOpponentToAttack();
0x0145 [0x0010 + 0x00] = h(0x0111);
0x014c 0x72 JumpTo(0x017c)
0x014f JumpIf((b[0x0004 + 0x00] & 0x02) != 0x02)(0x016d);
0x015b SetRandomOpponentInBackRowToAttack();
0x016a 0x72 JumpTo(0x0175)
0x016d SetRandomOpponentToAttack();
0x0175 [0x0010 + 0x00] = h(0x0110);
0x017c 0x72 JumpTo(0x01f1)
0x017f 0x72 JumpTo(0x0182)
0x0182 [0x000c + 0x00] = b(0x02);
0x0188 JumpIfRandomNot(1/b[0x000c + 0x00])(0x01c1);
0x0191 JumpIf((b[0x0004 + 0x00] & 0x02) != 0x02)(0x01af);
0x019d SetRandomOpponentInBackRowToAttack();
0x01ac 0x72 JumpTo(0x01b7)
0x01af SetRandomOpponentToAttack();
0x01b7 [0x0010 + 0x00] = h(0x0110);
0x01be 0x72 JumpTo(0x01ee)
0x01c1 JumpIf((b[0x0004 + 0x00] & 0x01) != 0x01)(0x01df);
0x01cd SetRandomOpponentInFrontRowToAttack();
0x01dc 0x72 JumpTo(0x01e7)
0x01df SetRandomOpponentToAttack();
0x01e7 [0x0010 + 0x00] = h(0x0111);
0x01ee 0x72 JumpTo(0x01f1)
0x01f1 0x91 Pop()
0x01f2 0x72 JumpTo(0x0356)
0x01f5 0x01 LoadValue(0x0020)
0x01f8 0x60 PushImmediate(0x01)
0x01fa 0x71 JumpIfNotEqual(0x026f)
0x01fd [0x000c + 0x00] = b(0x04);
0x0203 JumpIfRandomNot(1/b[0x000c + 0x00])(0x023c);
0x020c JumpIf((b[0x0004 + 0x00] & 0x01) != 0x01)(0x022a);
0x0218 SetRandomOpponentInFrontRowToAttack();
0x0227 0x72 JumpTo(0x0232)
0x022a SetRandomOpponentToAttack();
0x0232 [0x0010 + 0x00] = h(0x0111);
0x0239 0x72 JumpTo(0x0269)
0x023c JumpIf((b[0x0004 + 0x00] & 0x02) != 0x02)(0x025a);
0x0248 SetRandomOpponentInBackRowToAttack();
0x0257 0x72 JumpTo(0x0262)
0x025a SetRandomOpponentToAttack();
0x0262 [0x0010 + 0x00] = h(0x0110);
0x0269 0x72 JumpTo(0x0355)
0x026c 0x72 JumpTo(0x0274)
0x026f 0x60 PushImmediate(0x02)
0x0271 0x71 JumpIfNotEqual(0x02e6)
0x0274 [0x000c + 0x00] = b(0x08);
0x027a JumpIfRandomNot(1/b[0x000c + 0x00])(0x02b3);
0x0283 JumpIf((b[0x0004 + 0x00] & 0x01) != 0x01)(0x02a1);
0x028f SetRandomOpponentInFrontRowToAttack();
0x029e 0x72 JumpTo(0x02a9)
0x02a1 SetRandomOpponentToAttack();
0x02a9 [0x0010 + 0x00] = h(0x0111);
0x02b0 0x72 JumpTo(0x02e0)
0x02b3 JumpIf((b[0x0004 + 0x00] & 0x02) != 0x02)(0x02d1);
0x02bf SetRandomOpponentInBackRowToAttack();
0x02ce 0x72 JumpTo(0x02d9)
0x02d1 SetRandomOpponentToAttack();
0x02d9 [0x0010 + 0x00] = h(0x0110);
0x02e0 0x72 JumpTo(0x0355)
0x02e3 0x72 JumpTo(0x02e6)
0x02e6 [0x000c + 0x00] = b(0x06);
0x02ec JumpIfRandomNot(1/b[0x000c + 0x00])(0x0325);
0x02f5 JumpIf((b[0x0004 + 0x00] & 0x01) != 0x01)(0x0313);
0x0301 SetRandomOpponentInFrontRowToAttack();
0x0310 0x72 JumpTo(0x031b)
0x0313 SetRandomOpponentToAttack();
0x031b [0x0010 + 0x00] = h(0x0111);
0x0322 0x72 JumpTo(0x0352)
0x0325 JumpIf((b[0x0004 + 0x00] & 0x02) != 0x02)(0x0343);
0x0331 SetRandomOpponentInBackRowToAttack();
0x0340 0x72 JumpTo(0x034b)
0x0343 SetRandomOpponentToAttack();
0x034b [0x0010 + 0x00] = h(0x0110);
0x0352 0x72 JumpTo(0x0355)
0x0355 0x91 Pop()
0x0356 RunCommand(0x20, h[0x0010 + 0x00]);
0x035c 0x73 FinishScript()




02) ID 0017: Guard Hound 
level            03
speed            64
luck             06
physical dodge   06
strength         08
physical defense 02
magic power      02
magic defense    01
element id's: 255 255 255 255 255 255 255 255
effects:      255 255 255 255 255 255 255 255
action id:  03 04 ff ff ff ff ff ff ff ff ff ff ff ff ff ff
attack id:  0274 0275 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001
camera movement:  -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001
drop/stole rates:   08   a0   ff   ff
drop/stole items: 0000 0000 -001 -001
manipulate attacks id:  0274 0275 -001 -001
MP: 0000
AP: 0002
Morph item id: 0000
Damage From Back multiplied by: 16/8
Unknown: ff
HP: 00042
EXP: 00020
GIL: 00012
Immune mask: ffffffff
unknown:  ff ff ff ff
AI:
script 1:
0x0000 [0x0004 + 0x00] = b(0x00);
0x0006 [0x0008 + 0x00] = b(0x00);
0x000c [0x0000 + 0x00] = b(0x00);
0x0012 JumpIfNotAllFriendsInFrontRow(0x0029);
0x001f [0x0008 + 0x00] = b(b[0x0008 + 0x00] & 0x01);
0x0029 JumpIfNotAllFriendsInBackRow(0x0040);
0x0036 [0x0008 + 0x00] = b(b[0x0008 + 0x00] & 0x02);
0x0040 JumpIfNotAllOpponentsInFrontRow(0x0057);
0x004d [0x0004 + 0x00] = b(b[0x0004 + 0x00] & 0x01);
0x0057 JumpIfNotAllOpponentsInBackRow(0x006e);
0x0064 [0x0004 + 0x00] = b(b[0x0004 + 0x00] & 0x02);
0x006e JumpIfSelfNotInFrontRow(0x0084);
0x007b [0x0000 + 0x00] = b(0x00);
0x0081 0x72 JumpTo(0x008a)
0x0084 [0x0000 + 0x00] = b(0x01);
0x008a JumpIfRandomNot(1/0x03)(0x00c7);
0x0092 JumpIf((b[0x0004 + 0x00] & 0x02) != 0x02)(0x00b0);
0x009e SetRandomOpponentInBackRowToAttack();
0x00ad 0x72 JumpTo(0x00bd)
0x00b0 SetRandomOpponentWithLowestCurrentHP();
0x00bd [0x000c + 0x00] = h(0x0113);
0x00c4 0x72 JumpTo(0x00f9)
0x00c7 JumpIf((b[0x0004 + 0x00] & 0x01) != 0x01)(0x00e5);
0x00d3 SetRandomOpponentInFrontRowToAttack();
0x00e2 0x72 JumpTo(0x00f2)
0x00e5 SetRandomOpponentWithLowestCurrentHP();
0x00f2 [0x000c + 0x00] = h(0x0112);
0x00f9 RunCommand(0x20, h[0x000c + 0x00]);
0x00ff 0x73 FinishScript()




03) ID 0018: Mono Drive 
level            02
speed            49
luck             02
physical dodge   06
strength         03
physical defense 03
magic power      03
magic defense    02
element id's: 003 007 255 255 255 255 255 255
effects:      005 002 255 255 255 255 255 255
action id:  03 04 ff ff ff ff ff ff ff ff ff ff ff ff ff ff
attack id:  0276 0027 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001
camera movement:  -001 0261 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001 -001
drop/stole rates:   08   02   ff   ff
drop/stole items: 0000 0003 -001 -001
manipulate attacks id:  0276 0027 -001 -002
MP: 0028
AP: 0003
Morph item id: 0003
Damage From Back multiplied by: 16/8
Unknown: ff
HP: 00028
EXP: 00018
GIL: 00008
Immune mask: fdfff3ff
unknown:  ff ff ff ff
AI:
script 1:
0x0000 [0x0008 + 0x00] = b(0x00);
0x0006 [0x000c + 0x00] = b(0x00);
0x000c [0x0004 + 0x00] = b(0x00);
0x0012 JumpIfNotAllFriendsInFrontRow(0x0029);
0x001f [0x000c + 0x00] = b(b[0x000c + 0x00] & 0x01);
0x0029 JumpIfNotAllFriendsInBackRow(0x0040);
0x0036 [0x000c + 0x00] = b(b[0x000c + 0x00] & 0x02);
0x0040 JumpIfNotAllOpponentsInFrontRow(0x0057);
0x004d [0x0008 + 0x00] = b(b[0x0008 + 0x00] & 0x01);
0x0057 JumpIfNotAllOpponentsInBackRow(0x006e);
0x0064 [0x0008 + 0x00] = b(b[0x0008 + 0x00] & 0x02);
0x006e JumpIfSelfNotInFrontRow(0x0084);
0x007b [0x0004 + 0x00] = b(0x00);
0x0081 0x72 JumpTo(0x008a)
0x0084 [0x0004 + 0x00] = b(0x01);
0x008a JumpIfTrue(bit[0x0000 + 0x00])(0x00ce);
0x0091 [0x0018 + 0x00] = b(0x00);
0x0097 JumpIfRandomNot(1/0x02)(0x00b2);
0x009f 0x93 DisplayText(254e454d59003349474854454401ff)(Enemy Sighted!)
0x00af 0x72 JumpTo(0x00c5)
0x00b2 0x93 DisplayText(3741524e494e4701003741524e494e4701ff)(Warning! Warning!)
0x00c5 [0x0000 + 0x00] = b(0x01);
0x00cb 0x72 JumpTo(0x014e)
0x00ce [0x0018 + 0x00] = b(0x01);
0x00d4 JumpIfRandomNot(1/0x03)(0x0116);
0x00dc JumpIf((b[0x0008 + 0x00] & 0x02) != 0x02)(0x00fa);
0x00e8 SetRandomOpponentInBackRowToAttack();
0x00f7 0x72 JumpTo(0x0107)
0x00fa SetRandomOpponentWithLowestMagicDefence();
0x0107 [0x0010 + 0x00] = b(0x1b);
0x010d [0x0014 + 0x00] = b(0x01);
0x0113 0x72 JumpTo(0x014e)
0x0116 JumpIf((b[0x0008 + 0x00] & 0x01) != 0x01)(0x0134);
0x0122 SetRandomOpponentInFrontRowToAttack();
0x0131 0x72 JumpTo(0x0141)
0x0134 SetRandomOpponentWithLowestDefence();
0x0141 [0x0010 + 0x00] = h(0x0114);
0x0148 [0x0014 + 0x00] = b(0x00);
0x014e JumpIfFalse(bit[0x0014 + 0x00])(0x0195);
0x0154 0x02 LoadValue(0x2060)
0x0157 0x02 LoadValue(0x4140)
0x015a 0x80 FilterValueByMask()
0x015b 0x02 LoadValue(0x0080)
0x015e 0x86 GetMPCost()
0x015f 0x45 CompareLess()
0x0160 0x70 JumpIfFalse(0x0195)
0x0163 JumpIf((b[0x0008 + 0x00] & 0x01) != 0x01)(0x0181);
0x016f SetRandomOpponentInFrontRowToAttack();
0x017e 0x72 JumpTo(0x018e)
0x0181 SetRandomOpponentWithLowestDefence();
0x018e [0x0010 + 0x00] = h(0x0114);
0x0195 JumpIfFalse(bit[0x0018 + 0x00])(0x01a1);
0x019b RunCommand(0x20, h[0x0010 + 0x00]);
0x01a1 0x73 FinishScript()






Formation
01)
Location ID 0009
unknown:  ff ff 02 00 ff ff e7 03 e7 03 e7 03 e7 03 fd ff 02 0f
unknown:  f5 20 f8 f9 aa 00 00 00 60 fe 0c ff 10 27 78 ec 70 17 00 00 90 01 2c 01 10 27 78 ec 70 17 00 00 90 01 2c 01 ff ff ff ff ff ff ff ff ff ff ff ff
formation:
Enemy Id 0017	Position: x(0000) y(0000) z(1700)	Row 1	unknown:  00 ff ff ff ff ff

02)
Location ID 0012
unknown:  ff ff 01 00 ff ff 68 01 71 01 78 01 85 01 fd ff 00 11
unknown:  fe 11 38 f3 d0 1e 00 00 64 00 cc 00 10 27 78 ec 70 17 00 00 90 01 2c 01 10 27 78 ec 70 17 00 00 90 01 2c 01 ff ff ff ff ff ff ff ff ff ff ff ff
formation:
Enemy Id 0018	Position: x(-500) y(0000) z(-1700)	Row 1	unknown:  00 00 ff ff ff ff
Enemy Id 0018	Position: x(0500) y(-300) z(-1900)	Row 1	unknown:  00 00 ff ff ff ff

03)
Location ID 0012
unknown:  ff ff 01 00 ff ff e7 03 e7 03 e7 03 e7 03 fd ff 00 15
unknown:  d3 23 38 f5 d2 02 00 00 60 ff 4c ff 10 27 78 ec 70 17 00 00 90 01 2c 01 10 27 78 ec 70 17 00 00 90 01 2c 01 ff ff ff ff ff ff ff ff ff ff ff ff
formation:
Enemy Id 0016	Position: x(-1000) y(0000) z(-1700)	Row 1	unknown:  00 00 00 ff ff ff
Enemy Id 0016	Position: x(1000) y(0000) z(-1900)	Row 1	unknown:  00 00 00 ff ff ff
Enemy Id 0018	Position: x(0000) y(-400) z(-2700)	Row 2	unknown:  00 00 00 ff ff ff

04)
Location ID 0012
unknown:  ff ff 01 00 ff ff e7 03 e7 03 e7 03 e7 03 fd ff 00 19
unknown:  fa 20 b8 fb 89 f8 00 00 00 fe cc 00 10 27 78 ec 70 17 00 00 90 01 2c 01 10 27 78 ec 70 17 00 00 90 01 2c 01 ff ff ff ff ff ff ff ff ff ff ff ff
formation:
Enemy Id 0016	Position: x(-600) y(0000) z(-1900)	Row 1	unknown:  00 00 ff ff ff ff
Enemy Id 0016	Position: x(0600) y(0000) z(-1400)	Row 1	unknown:  00 00 ff ff ff ff




Attack Id and Names
01) ID 00272: 64 2d 00 ff 00 00 0f 00 ff ff ff ff 03 ff 11 10 ff ff ff ff ff ff ff ff 00 20 ff ff Machine Gun
02) ID 00273: 55 24 00 ff 00 00 23 00 ff ff ff ff 03 ff 11 18 ff ff ff ff ff ff ff ff 00 08 ff ff Tonfa
03) ID 00274: 64 30 00 ff 00 00 19 00 ff ff ff ff 03 ff 11 10 ff ff ff ff ff ff ff ff 00 08 ff ff Bite
04) ID 00275: 5a 3c 00 ff 00 00 dd 00 ff ff ff ff 03 ff 11 18 ff ff ff ff ff ff ff ff 00 08 ff ff Tentacle
05) ID 00276: 64 30 00 ff 00 00 e1 00 ff ff ff ff 03 ff 11 10 ff ff ff ff ff ff ff ff 00 10 ff ff Drilldrive
06) ID 00027: 64 ff 00 ff 04 00 ff ff 06 00 24 00 0f 1b 22 08 ff ff ff ff ff ff ff ff 01 00 ff fd Fire
07) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
08) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
09) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
10) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
11) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
12) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
13) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
14) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
15) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
16) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
17) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
18) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
19) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
20) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
21) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
22) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
23) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
24) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
25) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
26) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
27) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
28) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
29) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
30) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
31) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
32) ID 65535: ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff 
Loading file: player_ai
PLAYER 0:
script 4:
0x0000 [0x0000 + 0x00] = b(0xff);
0x0006 0x02 LoadValue(0x2060)
0x0009 0x01 LoadValue(0x40b8)
0x000c 0x80 FilterValueByMask()
0x000d 0x60 PushImmediate(0x13)
0x000f 0x71 JumpIfNotEqual(0x001e)
0x0012 [0x0000 + 0x00] = b(0x50);
0x0018 0x72 JumpTo(0x004b)
0x001b 0x72 JumpTo(0x0023)
0x001e 0x60 PushImmediate(0x12)
0x0020 0x71 JumpIfNotEqual(0x002f)
0x0023 [0x0000 + 0x00] = b(0x51);
0x0029 0x72 JumpTo(0x004b)
0x002c 0x72 JumpTo(0x0034)
0x002f 0x60 PushImmediate(0x15)
0x0031 0x71 JumpIfNotEqual(0x0040)
0x0034 [0x0000 + 0x00] = b(0x52);
0x003a 0x72 JumpTo(0x004b)
0x003d 0x72 JumpTo(0x0045)
0x0040 0x60 PushImmediate(0x11)
0x0042 0x71 JumpIfNotEqual(0x004b)
0x0045 [0x0000 + 0x00] = b(0x53);
0x004b 0x91 Pop()
0x004c 0x01 LoadValue(0x0000)
0x004f 0x60 PushImmediate(0xff)
0x0051 0x41 CompareNotEqual()
0x0052 0x70 JumpIfFalse(0x00ab)
0x0055 0x60 PushImmediate(0x00)
0x0057 0x01 LoadValue(0x0000)
0x005a 0x95 ExchangeByteWithMemory(800f83a4 + 2 <-> memorybank1/2)
0x005b 0x11 PushAddress(0x2018)
0x005e 0x01 LoadValue(0x2010)
0x0061 0x90 StoreValue()
0x0062 0x11 PushAddress(0x2010)
0x0065 0x01 LoadValue(0x2010)
0x0068 0x60 PushImmediate(0x03)
0x006a 0x30 MathAdd()
0x006b 0x90 StoreValue()
0x006c 0x01 LoadValue(0x2010)
0x006f 0x60 PushImmediate(0xc8)
0x0071 0x44 CompareGreater()
0x0072 0x70 JumpIfFalse(0x007b)
0x0075 [0x0402 + 0x00] = b(0xc8);
0x007b 0x60 PushImmediate(0x01)
0x007d 0x01 LoadValue(0x0000)
0x0080 0x95 ExchangeByteWithMemory(800f83a4 + 2 <-> memorybank1/2)
0x0081 0x01 LoadValue(0x2010)
0x0084 0x01 LoadValue(0x2018)
0x0087 0x02 LoadValue(0x2060)
0x008a 0x01 LoadValue(0x40b8)
0x008d 0x80 FilterValueByMask()
0x008e 0x60 PushImmediate(0x10)
0x0090 0x31 MathSub()
0x0091 0xa0 DebugTextOutput(LOVEPARA CHR:%d, %d->%d)(pop 3 var from stack)
0x00ab 0x73 FinishScript()

script 6:
0x0000 [0x0004 + 0x00] = b(0x00);
0x0006 0x01 LoadValue(0x0020)
0x0009 0x60 PushImmediate(0x03)
0x000b 0x45 CompareLess()
0x000c 0x70 JumpIfFalse(0x00d9)
0x000f 0x12 PushAddress(0x2070)
0x0012 0x01 LoadValue(0x0020)
0x0015 0x87 SetBit()
0x0016 0x90 StoreValue()
0x0017 0x02 LoadValue(0x2070)
0x001a 0x00 LoadValue(0x4000)
0x001d 0x80 FilterValueByMask()
0x001e 0x70 JumpIfFalse(0x00cc)
0x0021 [0x0000 + 0x00] = b(0xff);
0x0027 0x02 LoadValue(0x2070)
0x002a 0x01 LoadValue(0x4060)
0x002d 0x80 FilterValueByMask()
0x002e 0x60 PushImmediate(0x13)
0x0030 0x71 JumpIfNotEqual(0x003f)
0x0033 [0x0000 + 0x00] = b(0x50);
0x0039 0x72 JumpTo(0x006c)
0x003c 0x72 JumpTo(0x0044)
0x003f 0x60 PushImmediate(0x12)
0x0041 0x71 JumpIfNotEqual(0x0050)
0x0044 [0x0000 + 0x00] = b(0x51);
0x004a 0x72 JumpTo(0x006c)
0x004d 0x72 JumpTo(0x0055)
0x0050 0x60 PushImmediate(0x15)
0x0052 0x71 JumpIfNotEqual(0x0061)
0x0055 [0x0000 + 0x00] = b(0x52);
0x005b 0x72 JumpTo(0x006c)
0x005e 0x72 JumpTo(0x0066)
0x0061 0x60 PushImmediate(0x11)
0x0063 0x71 JumpIfNotEqual(0x006c)
0x0066 [0x0000 + 0x00] = b(0x53);
0x006c 0x91 Pop()
0x006d 0x01 LoadValue(0x0000)
0x0070 0x60 PushImmediate(0xff)
0x0072 0x41 CompareNotEqual()
0x0073 0x70 JumpIfFalse(0x00cc)
0x0076 0x60 PushImmediate(0x00)
0x0078 0x01 LoadValue(0x0000)
0x007b 0x95 ExchangeByteWithMemory(800f83a4 + 2 <-> memorybank1/2)
0x007c 0x11 PushAddress(0x2018)
0x007f 0x01 LoadValue(0x2010)
0x0082 0x90 StoreValue()
0x0083 0x11 PushAddress(0x2010)
0x0086 0x01 LoadValue(0x2010)
0x0089 0x60 PushImmediate(0x05)
0x008b 0x31 MathSub()
0x008c 0x90 StoreValue()
0x008d 0x01 LoadValue(0x2010)
0x0090 0x60 PushImmediate(0x32)
0x0092 0x45 CompareLess()
0x0093 0x70 JumpIfFalse(0x009c)
0x0096 [0x0402 + 0x00] = b(0x32);
0x009c 0x60 PushImmediate(0x01)
0x009e 0x01 LoadValue(0x0000)
0x00a1 0x95 ExchangeByteWithMemory(800f83a4 + 2 <-> memorybank1/2)
0x00a2 0x01 LoadValue(0x2010)
0x00a5 0x01 LoadValue(0x2018)
0x00a8 0x02 LoadValue(0x2070)
0x00ab 0x01 LoadValue(0x4060)
0x00ae 0x80 FilterValueByMask()
0x00af 0x60 PushImmediate(0x10)
0x00b1 0x31 MathSub()
0x00b2 0xa0 DebugTextOutput(LOVEPARA CHR:%d, %d->%d)(pop 3 var from stack)
0x00cc 0x11 PushAddress(0x0020)
0x00cf 0x01 LoadValue(0x0020)
0x00d2 0x60 PushImmediate(0x01)
0x00d4 0x30 MathAdd()
0x00d5 0x90 StoreValue()
0x00d6 0x72 JumpTo(0x0006)
0x00d9 0x73 FinishScript()




PLAYER 1:
script 0:
0x0000 0x60 PushImmediate(0x03)
0x0002 0x75 LinkScriptToOtherPlayer()
0x0003 0x73 FinishScript()




PLAYER 2:
script 0:
0x0000 0x60 PushImmediate(0x03)
0x0002 0x75 LinkScriptToOtherPlayer()
0x0003 0x73 FinishScript()




PLAYER 3:
script 2:
0x0000 0x02 LoadValue(0x2060)
0x0003 0x01 LoadValue(0x4060)
0x0006 0x80 FilterValueByMask()
0x0007 0x60 PushImmediate(0x13)
0x0009 0x71 JumpIfNotEqual(0x0018)
0x000c [0x0010 + 0x00] = b(0x50);
0x0012 0x72 JumpTo(0x0045)
0x0015 0x72 JumpTo(0x001d)
0x0018 0x60 PushImmediate(0x12)
0x001a 0x71 JumpIfNotEqual(0x0029)
0x001d [0x0010 + 0x00] = b(0x51);
0x0023 0x72 JumpTo(0x0045)
0x0026 0x72 JumpTo(0x002e)
0x0029 0x60 PushImmediate(0x15)
0x002b 0x71 JumpIfNotEqual(0x003a)
0x002e [0x0010 + 0x00] = b(0x52);
0x0034 0x72 JumpTo(0x0045)
0x0037 0x72 JumpTo(0x003f)
0x003a 0x60 PushImmediate(0x11)
0x003c 0x71 JumpIfNotEqual(0x0045)
0x003f [0x0010 + 0x00] = b(0x53);
0x0045 0x91 Pop()
0x0046 0x12 PushAddress(0x2070)
0x0049 0x02 LoadValue(0x2060)
0x004c 0x02 LoadValue(0x40d0)
0x004f 0x80 FilterValueByMask()
0x0050 0x90 StoreValue()
0x0051 0x12 PushAddress(0x2070)
0x0054 0x02 LoadValue(0x2070)
0x0057 0x01 LoadValue(0x4060)
0x005a 0x80 FilterValueByMask()
0x005b 0x60 PushImmediate(0x10)
0x005d 0x40 CompareEqual()
0x005e 0x90 StoreValue()
0x005f 0x02 LoadValue(0x2070)
0x0062 0x70 JumpIfFalse(0x0143)
0x0065 0x13 PushAddress(0x0020)
0x0068 0x02 LoadValue(0x2060)
0x006b 0x03 LoadValue(0x4160)
0x006e 0x80 FilterValueByMask()
0x006f 0x90 StoreValue()
0x0070 [0x000c + 0x00] = b(0x00);
0x0076 0x03 LoadValue(0x0020)
0x0079 0x03 LoadValue(0x0000)
0x007c 0x45 CompareLess()
0x007d 0x70 JumpIfFalse(0x008f)
0x0080 [0x0014 + 0x00] = b(0x00);
0x0086 [0x000c + 0x00] = b(0x02);
0x008c 0x72 JumpTo(0x00c0)
0x008f JumpIfFalse(bit[0x0018 + 0x00])(0x00aa);
0x0095 0x03 LoadValue(0x0020)
0x0098 0x70 JumpIfFalse(0x00a7)
0x009b [0x0014 + 0x00] = b(0x01);
0x00a1 [0x000c + 0x00] = b(0x04);
0x00a7 0x72 JumpTo(0x00c0)
0x00aa 0x03 LoadValue(0x0020)
0x00ad 0x03 LoadValue(0x0000)
0x00b0 0x44 CompareGreater()
0x00b1 0x70 JumpIfFalse(0x00c0)
0x00b4 [0x0014 + 0x00] = b(0x01);
0x00ba [0x000c + 0x00] = b(0x02);
0x00c0 0x01 LoadValue(0x0060)
0x00c3 0x70 JumpIfFalse(0x0143)
0x00c6 0x60 PushImmediate(0x00)
0x00c8 0x01 LoadValue(0x0080)
0x00cb 0x95 ExchangeByteWithMemory(800f83a4 + 2 <-> memorybank1/2)
0x00cc 0x11 PushAddress(0x2018)
0x00cf 0x01 LoadValue(0x2010)
0x00d2 0x90 StoreValue()
0x00d3 0x00 LoadValue(0x00a0)
0x00d6 0x60 PushImmediate(0x01)
0x00d8 0x40 CompareEqual()
0x00d9 0x70 JumpIfFalse(0x00f9)
0x00dc 0x11 PushAddress(0x2010)
0x00df 0x01 LoadValue(0x2010)
0x00e2 0x01 LoadValue(0x0060)
0x00e5 0x30 MathAdd()
0x00e6 0x90 StoreValue()
0x00e7 0x01 LoadValue(0x2010)
0x00ea 0x60 PushImmediate(0xc8)
0x00ec 0x44 CompareGreater()
0x00ed 0x70 JumpIfFalse(0x00f6)
0x00f0 [0x0402 + 0x00] = b(0xc8);
0x00f6 0x72 JumpTo(0x0113)
0x00f9 0x11 PushAddress(0x2010)
0x00fc 0x01 LoadValue(0x2010)
0x00ff 0x01 LoadValue(0x0060)
0x0102 0x31 MathSub()
0x0103 0x90 StoreValue()
0x0104 0x01 LoadValue(0x2010)
0x0107 0x60 PushImmediate(0x32)
0x0109 0x45 CompareLess()
0x010a 0x70 JumpIfFalse(0x0113)
0x010d [0x0402 + 0x00] = b(0x32);
0x0113 0x60 PushImmediate(0x01)
0x0115 0x01 LoadValue(0x0080)
0x0118 0x95 ExchangeByteWithMemory(800f83a4 + 2 <-> memorybank1/2)
0x0119 0x01 LoadValue(0x2010)
0x011c 0x01 LoadValue(0x2018)
0x011f 0x02 LoadValue(0x2060)
0x0122 0x01 LoadValue(0x4060)
0x0125 0x80 FilterValueByMask()
0x0126 0x60 PushImmediate(0x10)
0x0128 0x31 MathSub()
0x0129 0xa0 DebugTextOutput(LOVEPARA CHR:%d, %d->%d)(pop 3 var from stack)
0x0143 0x73 FinishScript()

script 3:
0x0000 0x02 LoadValue(0x2060)
0x0003 0x01 LoadValue(0x4060)
0x0006 0x80 FilterValueByMask()
0x0007 0x60 PushImmediate(0x13)
0x0009 0x71 JumpIfNotEqual(0x0018)
0x000c [0x0010 + 0x00] = b(0x50);
0x0012 0x72 JumpTo(0x0045)
0x0015 0x72 JumpTo(0x001d)
0x0018 0x60 PushImmediate(0x12)
0x001a 0x71 JumpIfNotEqual(0x0029)
0x001d [0x0010 + 0x00] = b(0x51);
0x0023 0x72 JumpTo(0x0045)
0x0026 0x72 JumpTo(0x002e)
0x0029 0x60 PushImmediate(0x15)
0x002b 0x71 JumpIfNotEqual(0x003a)
0x002e [0x0010 + 0x00] = b(0x52);
0x0034 0x72 JumpTo(0x0045)
0x0037 0x72 JumpTo(0x003f)
0x003a 0x60 PushImmediate(0x11)
0x003c 0x71 JumpIfNotEqual(0x0045)
0x003f [0x0010 + 0x00] = b(0x53);
0x0045 0x91 Pop()
0x0046 0x12 PushAddress(0x2070)
0x0049 0x02 LoadValue(0x2060)
0x004c 0x02 LoadValue(0x40d0)
0x004f 0x80 FilterValueByMask()
0x0050 0x90 StoreValue()
0x0051 0x12 PushAddress(0x2070)
0x0054 0x02 LoadValue(0x2070)
0x0057 0x01 LoadValue(0x4060)
0x005a 0x80 FilterValueByMask()
0x005b 0x60 PushImmediate(0x10)
0x005d 0x40 CompareEqual()
0x005e 0x90 StoreValue()
0x005f 0x02 LoadValue(0x2070)
0x0062 0x70 JumpIfFalse(0x00bb)
0x0065 0x60 PushImmediate(0x00)
0x0067 0x01 LoadValue(0x0080)
0x006a 0x95 ExchangeByteWithMemory(800f83a4 + 2 <-> memorybank1/2)
0x006b 0x11 PushAddress(0x2018)
0x006e 0x01 LoadValue(0x2010)
0x0071 0x90 StoreValue()
0x0072 0x11 PushAddress(0x2010)
0x0075 0x01 LoadValue(0x2010)
0x0078 0x60 PushImmediate(0x04)
0x007a 0x31 MathSub()
0x007b 0x90 StoreValue()
0x007c 0x01 LoadValue(0x2010)
0x007f 0x60 PushImmediate(0x32)
0x0081 0x45 CompareLess()
0x0082 0x70 JumpIfFalse(0x008b)
0x0085 [0x0402 + 0x00] = b(0x32);
0x008b 0x60 PushImmediate(0x01)
0x008d 0x01 LoadValue(0x0080)
0x0090 0x95 ExchangeByteWithMemory(800f83a4 + 2 <-> memorybank1/2)
0x0091 0x01 LoadValue(0x2010)
0x0094 0x01 LoadValue(0x2018)
0x0097 0x02 LoadValue(0x2060)
0x009a 0x01 LoadValue(0x4060)
0x009d 0x80 FilterValueByMask()
0x009e 0x60 PushImmediate(0x10)
0x00a0 0x31 MathSub()
0x00a1 0xa0 DebugTextOutput(LOVEPARA CHR:%d, %d->%d)(pop 3 var from stack)
0x00bb 0x73 FinishScript()

script 7:
0x0000 0x13 PushAddress(0x0000)
0x0003 0x02 LoadValue(0x2060)
0x0006 0x03 LoadValue(0x4160)
0x0009 0x80 FilterValueByMask()
0x000a 0x90 StoreValue()
0x000b 0x10 PushAddress(0x00c0)
0x000e 0x02 LoadValue(0x2060)
0x0011 0x00 LoadValue(0x4000)
0x0014 0x80 FilterValueByMask()
0x0015 0x90 StoreValue()
0x0016 0x73 FinishScript()




PLAYER 5:
script 0:
0x0000 0x60 PushImmediate(0x03)
0x0002 0x75 LinkScriptToOtherPlayer()
0x0003 0x73 FinishScript()




PLAYER 7:
script 1:
0x0000 0x11 PushAddress(0x0000)
0x0003 0x60 PushImmediate(0x70)
0x0005 0x01 LoadValue(0x2038)
0x0008 0x60 PushImmediate(0x02)
0x000a 0x32 MathMul()
0x000b 0x30 MathAdd()
0x000c 0x90 StoreValue()
0x000d 0x81 MathRandom()
0x000e 0x60 PushImmediate(0x0a)
0x0010 0x34 MathMod()
0x0011 0x60 PushImmediate(0x03)
0x0013 0x45 CompareLess()
0x0014 0x70 JumpIfFalse(0x0021)
0x0017 0x11 PushAddress(0x0000)
0x001a 0x01 LoadValue(0x0000)
0x001d 0x60 PushImmediate(0x01)
0x001f 0x30 MathAdd()
0x0020 0x90 StoreValue()
0x0021 [0x040e + 0x00] = h(h[0x0408 + 0x00]);
0x0028 0x60 PushImmediate(0x14)
0x002a 0x01 LoadValue(0x0000)
0x002d 0x92 RunCommand()
0x002e 0x73 FinishScript()




PLAYER a:
script 0:
0x0000 0x12 PushAddress(0x2060)
0x0003 0x10 PushAddress(0x4024)
0x0006 0x80 FilterValueByMask()
0x0007 0x60 PushImmediate(0x01)
0x0009 0x90 StoreValue()
0x000a 0x12 PushAddress(0x2060)
0x000d 0x10 PushAddress(0x4029)
0x0010 0x80 FilterValueByMask()
0x0011 0x60 PushImmediate(0x01)
0x0013 0x90 StoreValue()
0x0014 0x12 PushAddress(0x2060)
0x0017 0x10 PushAddress(0x4028)
0x001a 0x80 FilterValueByMask()
0x001b 0x60 PushImmediate(0x01)
0x001d 0x90 StoreValue()
0x001e 0x12 PushAddress(0x2060)
0x0021 0x10 PushAddress(0x402a)
0x0024 0x80 FilterValueByMask()
0x0025 0x60 PushImmediate(0x01)
0x0027 0x90 StoreValue()
0x0028 0x73 FinishScript()

script 1:
0x0000 [0x0000 + 0x00] = b(0x02);
0x0006 0x02 LoadValue(0x20a0)
0x0009 0x60 PushImmediate(0x08)
0x000b 0x96 GetUnitsElementalDefense()
0x000c 0x12 PushAddress(0x2070)
0x000f 0x02 LoadValue(0x2070)
0x0012 0x01 LoadValue(0x4058)
0x0015 0x80 FilterValueByMask()
0x0016 0x60 PushImmediate(0x05)
0x0018 0x42 CompareGreaterEqual()
0x0019 0x90 StoreValue()
0x001a 0x02 LoadValue(0x2070)
0x001d 0x70 JumpIfFalse(0x003f)
0x0020 0x60 PushImmediate(0x00)
0x0022 0xa0 DebugTextOutput(RESIST EARTH MONSTER)(pop 1 var from stack)
0x0039 [0x0008 + 0x00] = b(0x01);
0x003f 0x12 PushAddress(0x2070)
0x0042 0x02 LoadValue(0x2050)
0x0045 0x01 LoadValue(0x4060)
0x0048 0x80 FilterValueByMask()
0x0049 0x60 PushImmediate(0x19)
0x004b 0x40 CompareEqual()
0x004c 0x90 StoreValue()
0x004d 0x02 LoadValue(0x2070)
0x0050 0x02 LoadValue(0x2070)
0x0053 0x00 LoadValue(0x4000)
0x0056 0x80 FilterValueByMask()
0x0057 0x60 PushImmediate(0x01)
0x0059 0x40 CompareEqual()
0x005a 0x50 LogAnd()
0x005b 0x81 MathRandom()
0x005c 0x60 PushImmediate(0x03)
0x005e 0x34 MathMod()
0x005f 0x60 PushImmediate(0x00)
0x0061 0x40 CompareEqual()
0x0062 0x50 LogAnd()
0x0063 0x70 JumpIfFalse(0x006f)
0x0066 [0x0004 + 0x00] = b(0x08);
0x006c 0x72 JumpTo(0x00e1)
0x006f 0x02 LoadValue(0x20a0)
0x0072 0x83 CountActiveBits()
0x0073 0x60 PushImmediate(0x01)
0x0075 0x40 CompareEqual()
0x0076 0x70 JumpIfFalse(0x00a0)
0x0079 SetRandomOpponentToAttack();
0x0081 0x02 LoadValue(0x2070)
0x0084 0x01 LoadValue(0x4270)
0x0087 0x80 FilterValueByMask()
0x0088 0x60 PushImmediate(0x10)
0x008a 0x42 CompareGreaterEqual()
0x008b 0x70 JumpIfFalse(0x0097)
0x008e [0x0004 + 0x00] = b(0x1d);
0x0094 0x72 JumpTo(0x009d)
0x0097 [0x0000 + 0x00] = b(0x01);
0x009d 0x72 JumpTo(0x00e1)
0x00a0 [0x040e + 0x00] = h(h[0x0414 + 0x00]);
0x00a7 0x81 MathRandom()
0x00a8 0x60 PushImmediate(0x03)
0x00aa 0x34 MathMod()
0x00ab 0x01 LoadValue(0x0040)
0x00ae 0x30 MathAdd()
0x00af 0x60 PushImmediate(0x00)
0x00b1 0x71 JumpIfNotEqual(0x00c6)
0x00b4 [0x0004 + 0x00] = b(0x26);
0x00ba [0x0008 + 0x00] = b(0x01);
0x00c0 0x72 JumpTo(0x00e0)
0x00c3 0x72 JumpTo(0x00cb)
0x00c6 0x60 PushImmediate(0x01)
0x00c8 0x71 JumpIfNotEqual(0x00d7)
0x00cb [0x0004 + 0x00] = b(0x20);
0x00d1 0x72 JumpTo(0x00e0)
0x00d4 0x72 JumpTo(0x00d7)
0x00d7 [0x0004 + 0x00] = b(0x23);
0x00dd 0x72 JumpTo(0x00e0)
0x00e0 0x91 Pop()
0x00e1 0x01 LoadValue(0x0000)
0x00e4 0x01 LoadValue(0x0020)
0x00e7 0x92 RunCommand()
0x00e8 0x73 FinishScript()




