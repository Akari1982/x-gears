////////////////////////////////
// battle_get_point_by_model_bone
S0 = A2;
[S0 + 0] = h(hu[801518e4 + A0 * b9c + 174 + A1 * 34 + 14] - hu[800fa63c + 14]);
[S0 + 2] = h(hu[801518e4 + A0 * b9c + 174 + A1 * 34 + 18] - hu[800fa63c + 18]);
[S0 + 4] = h(hu[801518e4 + A0 * b9c + 174 + A1 * 34 + 1c] - hu[800fa63c + 1c]);

A0 = 800fa63c;
A1 = SP + 10;
system_transponate_matrix;

A0 = SP + 10;
A1 = S0;
A2 = A1;
system_matrix_vector_multiply;
////////////////////////////////



////////////////////////////////
// battle_calculate_middle_point_from_target_mask_units_position
min_x = 7fff;
max_x = -8000;
min_z = 7fff;
max_z = -8000;

A3 = 0;
loopd5508:	; 800D5508
    V0 = A0 >> A3;
    if (V0 & 1)
    {
        V1 = h[801518e4 + A3 * b9c + 168]; // X
        if (V1 < min_x)
        {
            min_x = V1;
        }
        if (max_x < V1)
        {
            max_x = V1;
        }

        V1 = h[801518e4 + A3 * b9c + 16c]; // Z
        if (V1 < min_z)
        {
            min_z = V1;
        }

        if (max_z < V1)
        {
            max_z = V1;
        }
    }

    A3 = A3 + 1;
    V0 = A3 < a;
800D5568	bne    v0, zero, loopd5508 [$800d5508]

[A1 + 0] = h((min_x + max_x) / 2);
[A1 + 2] = h(0);
[A1 + 4] = h((min_z + max_z) / 2);

return A1;
////////////////////////////////



////////////////////////////////////////////////////
// funca2f4c
pos1 = w[800f3944];
pos2 = w[800f3948];

[80163798 + pos1 * c + 2] = b(0);
[80163798 + pos1 * c + 3] = b(0);
[80163798 + pos1 * c + a] = h(pos2);

if (pos2 < 40)
{
    [800f3944] = w(pos1 + 1);
}
else
{
    A0 = 28;
    func155a4;
}

return 80163798 + pos1 * c;
////////////////////////////////////////////////////



////////////////////////////////////////////////////
// funcb1218
modifier = b[800f5bb8 + A0 * 44 + 20 + A2];

return A1 + (A1 * modifier) / 64;
////////////////////////////////////////////////////



//////////////////////////////////////////////////////
// funca31a0
S0 = A0;
S1 = A1;
S2 = A2;
S3 = A3;
funca2f4c;

[V0 + 0] = b(S0); // party id
[V0 + 1] = b(S1);
[V0 + 5] = b(S2);
[V0 + 6] = h(S3);
[V0 + 8] = h(ffff);
[V0 + a] = h(ffff);
//////////////////////////////////////////////////////



////////////////////////////////////////////////////
// funca3e98
[SP + 10] = b(A1); // priority
[SP + 12] = b(A0); // unit id
[SP + 13] = b(A2); // action id
[SP + 14] = h(A3); // attack id
[SP + 16] = h(w[SP + 30]); // target mask
A0 = SP + 10;
funca3d4c;
////////////////////////////////////////////////////



////////////////////////////////////////////////////
// funca3d4c
priority = bu[A0 + 0];
A3 = 0;

loopa3d6c:	; 800A3D6C
    // if slot empty
    V0 = bu[800f6934 + A3];
    if (V0 == ff)
    {
        V0 = bu[800f6b9b + priority];
        [A0 + 1] = b(V0);
        V0 = V0 + 1;
        [800f6b9b + priority] = b(V0);

        [800f6934 + A3 + 0] = h(h[A0 + 0]);
        [800f6934 + A3 + 2] = h(h[A0 + 2]);
        [800f6934 + A3 + 4] = h(h[A0 + 4]);
        [800f6934 + A3 + 6] = h(h[A0 + 6]);

        [800f7dde] = h(priority);

        if (priority >= 2)
        {
            unit_id = b[A0 + 2];
            V0 = w[800f83e0 + unit_id * 68 + 4];
            V0 = V0 & ffffffdf;
            [800f83e0 + unit_id * 68 + 4] = w(V0);

            action_id = bu[A0 + 3];
            action_id = action_id & 003f;
            if (action_id == 13) // defend
            {
                V0 = w[800f83e0 + unit_id * 68 + 4];
                V0 = V0 | 00000020;
                [800f83e0 + unit_id * 68 + 4] = w(V0);
            }
        }

        return;
    }

    A3 = A3 + 8;
    V0 = A3 < 200;
800A3E88	bne    v0, zero, loopa3d6c [$800a3d6c]
////////////////////////////////////////////////////