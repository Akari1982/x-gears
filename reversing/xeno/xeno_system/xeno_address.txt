8004f23c store 4 points xyz for sprite tile during calculation in func1e264
+00 [][] x0
+02 [][] y0
+04 [][] z0
+06 [][]
+08 [][] x1
+0a [][] y1
+0c [][] z1
+0e [][]
+10 [][] x3
+12 [][] y3
+14 [][] z3
+16 [][]
+18 [][] x2
+1a [][] y2
+1c [][] z2
+1e [][]



8004f4f4 data for load 3d data.
// load_poly functions
//                                                         18       1c       20       24
//00 48DE0280 30EB0280 80E20280 ECE60280 48DE0280 48DE0280 DCCB0280 08000000 04000000 14000000
//01 5CDE0280 F0F00280 94E20280 00E70280 1CED0280 F4EE0280 24D60280 08000000 08000000 20000000 textured monochrome triangle (with lighting calculation)
//02 34DE0280 C4F40280 6CE20280 D8E60280 34DE0280 34DE0280 BCD40280 08000000 04000000 1C000000
//03 20DE0280 C4F20280 58E20280 C4E60280 20DE0280 20DE0280 24D80280 08000000 08000000 28000000 textured gourad triangle (with lighting calculation)
//04 48DE0280 48DE0280 80E20280 ECE60280 48DE0280 48DE0280 44CD0280 08000000 04000000 14000000 monochrome triangle
//05 5CDE0280 5CDE0280 94E20280 00E70280 1CED0280 F4EE0280 94D70280 08000000 08000000 20000000 textured monochrome triangle
//06 34DE0280 34DE0280 6CE20280 D8E60280 34DE0280 34DE0280 8CD50280 08000000 04000000 1C000000
//07 20DE0280 20DE0280 58E20280 C4E60280 20DE0280 20DE0280 24D80280 08000000 08000000 28000000
//08 64E00280 E0F60280 84E40280 F0E80280 64E00280 64E00280 68CD0280 08000000 04000000 18000000
//09 78E00280 F8F80280 98E40280 04E90280 0CFB0280 1CFD0280 40D30280 08000000 0C000000 28000000 textured monochrome quad (with lighting calculation)
//0a 50E00280 50E00280 70E40280 DCE80280 50E00280 50E00280 90CF0280 08000000 04000000 24000000
//0b 3CE00280 3CE00280 5CE40280 C8E80280 3CE00280 3CE00280 54D00280 08000000 0C000000 34000000
//0c 64E00280 64E00280 84E40280 F0E80280 64E00280 64E00280 D0CE0280 08000000 04000000 18000000 monochrome quad
//0d 78E00280 78E00280 98E40280 04E90280 0CFB0280 1CFD0280 F4CE0280 08000000 0C000000 28000000 textured monochrome quad
//0e 50E00280 50E00280 70E40280 DCE80280 50E00280 50E00280 90CF0280 08000000 04000000 24000000
//0f 3CE00280 3CE00280 5CE40280 C8E80280 3CE00280 3CE00280 54D00280 08000000 0C000000 34000000
+18 - function to fill the packet.
+1c - size of polygon data.
+20 - size of tex data.
+24 - size of packets data.

8004f7ac [][][][] some tex page global setting. If 1 or 2 we use some default values.
8004f7b0 [][][][] some clut global setting. If 0 then we use some default values.

8004ff84 [][][][] address of SPU registers 0x1f801c00.

800560a0 square root data (0x2 each). 12bit fixed point.

80056234

800566d0          rotation for angle 0 - 45 (each 2 bytes)

800584d0 [][][][] shifter for spu address (always 3)

80058810 GP
+1ac [][]     store 4 here when we start parse model and animation.
+1c0 [][][][] store 0 here when we start parse model and animation.


800589a8 [][]     store tex page setting here during initialization.
800589ac [][]     store here clut setting during initialization.
800589b0 [][][][] we get here default tex page setting and store it to 800589a8 if 8004f7ac == 2, in case of 1 we load only tex X and Y from here.
800589b4 [][][][] we get here default clut Y setting and store it to 800589ac if 8004f7ac == 0.

800589e8 [][][][] store start of extended text characters here. 0xf8 in japanese.

80058aa0 [][][][] number of channels to activate. Store 2 here when starting new sound.

80058aac [][][][] pointer to first element in channel struct (0x800651a0). Struct is dynamic size with 0x10 bytes header. Can be in range 800651a0-8006b490

80058adc [][][][] pointer to some SED file (0391.sed).
80058ac0 [][][][] store here pointer to place for packets.

80058b34 [][][][] store here pointer to precalculated normal for polygon lighting. Allocated memory from +18 in model data file.

80058b98 [][][][] flags for turning SPU Voice ON.

80058bc8 [][][][] we store here +0c [][][][] from model parts header. Maybe for futher use in inner functions.

80058bd8 [][][][] pointer to vertex block in model data file during packet init.

80058bf0 [][][][] flags for turning SPU Voice OFF.
80058bf4 [][][][] pointer to SND file (with wds signature).

80058c00 [][][][] pointer to snd music structs data after header.

80058c18 [][]     some sound control flags.
                    0x0040 we don't play sound thread if this is set.
                    0x0100 if this flag is set then we use mono sound without separation on different channels.
                    0x0800 we start new sound.
                    0x1000 ???
                    0x2000 enable reverb.

80058c20 

80058c58 [][][][] some sys event id. Maybe sound event callback.
80058c5c [][][][] we add here number of polygons for which we create packets.

80058c74 [][][][] offset to 80061bbc SPU channel structures.

80058c80 [][][][] last address in spu struct data (0x8006b490).

80059600 light matrix
    +00 [][][][] R11R12 for light matrix calculation.
    +04 [][][][] R13R21 for light matrix calculation.
    +08 [][][][] R22R23 for light matrix calculation.
    +0c [][][][] R31R32 for light matrix calculation.
    +10 [][][][] R33 for light matrix calculation.

80059674 struct with data for text.
    +1c [][][][] pointer to next character.

80061bbc array of 4 bytes offsets to SPU channel structures at offset 0xc4.



800651a0-8006b490. Spu data structures. Can be anywhere because allocate dynamicly. Located via struct header.
// header (0x10 size)
+00 [][]     some id. In music set to 2;
+02 [][]     0.
+04 [][][][] 0.
+08 [][][][] end of data in this struct (number of channels * 0x158 + 0x94 if bu[smd + 15] != 0 then add 0x180).
+0c [][][][] link to next struct.

// start of music data (0x94 size) after this starts channels structs
+00 [][][][] store here previous music data pointer from 0x80058c00.
+08 [][][][] pointer to smd file.
+10 [][]     some flags. Add 0x0001 on init.
+12 [][]     smd + 10.
+14 []       number of channels.
+16 [][]     smd + 16.
+18 [][]     smd + 18.
+1a []       init with 0.
+1b []       init with 0.
+20 [][][][] init with 0. Maybe number of cycles.
+24 [][][][] init with 0.
+28 [][][][] init with 0.
+30 [][]     init with 0.
+32 [][]     init with 0x0001.
+34 [][]     init with 0.
+36 [][]     init with 0x0001.
+38 [][]     init with 0x0004.
+3a [][]     init with 0x0030.
+3c [][]     init with 0x0004.
+3e [][]     init with 0x0004.
+41 []       smd + 1a.
+42 []       smd + 1c.
+43 []       smd + 1d.
+44 [][]     smd + 1b << 8.
+48 [][][][] mask of channels.
+4c [][][][] init with 0.
+60 [][]     ??? something that we count down.
+7e [][]     pitch related.
+8a [][]     volume distribution addition.

// SPU channel structure (0x158 size)
+000 [][]     control flags.
                0x0002 - disable reverb.
                0x0008 - if set then we will not update volume.
                0x0100 - stops sequence.
                0x0200 = this flag is set f 0x0800 flag set at the end of sequence parsing.
                0x0400 - stops sequence. And stop channel.
                0x0800 = if this flag set at the end of sequence parsing - we will add 0x0200 flag.
                0x1000 - set if in sequence next pause will be note. Remove othewise. This will set new release just before next note.
                0x8000 - instrument for channel was set but not updated yet.
+002 [][]     calculate flags.
                0x0001 - calculate enable
                0x0002 - calculate disable
                0x0100 - calculate volume.
                0x0200 - calculate pitch.
+004 [][]     update timers flags.
                0x0001 - base pitch update.
                0x0002 - if set then update base pitch without timer.
                0x0008 - base volume update.
                0x0010 - base volume distribution update.
                0x0020 - note volume update.
                0x0100 - 
+006 []       channel id.
+007 []       init with 0x10.
+008 [][][][] init with smd + 10.
+010 [][][][] sequence start pointer.
+014 [][][][] sequence current pointer.
+018 [][][][] stored sequence pointer (opcode 0x91).
+01c [][][][] init with 0.
+020 [][]     init with 0.
+022 []       init with 0.
+023 []       we store here +066 during opcode 91. Restore +066 from here during opcode 90.
+025 []       init with 0.
+026 []       instrument id.
+027 []       spu channel id.
+028 []       store base release rate here.
+02c [][][][] pointer to snd file (instruments data).
+030 [][]     store here channel id.
+032 [][]     enable flags.
                0x0010 - enable channel FM (pitch lfo) mode.
                0x0020 - enable channel Noise mode.
                0x0040 - enable channel Reverb mode.
+034 [][]     init with 0x0100.
+036 [][]     update flags.
                0x0001 - update left and right volume.
                0x0004 - update pitch.
                0x0008 - update start and loop sound address.
                0x0010 - update attack mode and attack rate.
                0x0020 - update decay rate.
                0x0040 - update sustain mode and sustain rate.
                0x0080 - update release mode and release rate.
                0x0100 - update sustain level.
                0x1000 - update Channel FM (pitch lfo) mode.
                0x2000 - update Channel Noise mode.
                0x4000 - update Channel Reverb mode.
+038 [][]     left volume.
+03a [][]     right volume.
+03c [][]     init with 0.
+03e [][]     init with 0.
+044 [][]     pitch.
+04c [][][][] start address.
+050 [][][][] loop address.
+054 []       0x04 - attack mode.
+055 []       this >> 1 - sustain mode.
+056 []       this >> 2 - release mode.
+057 []       attack rate.
+058 []       decay rate.
+059 []       sustain rate.
+05a []       release rate.
+05b []       sustain level.
+05c [][]     script wait timer.
+05e [][]     timer to stop playing note.
+060 []       init with 0.
+062 [][]     init with 0x000f.
+064 []       init with 0.
+066 []       init with 0x003c.
+068 [][][][] base pitch.
+06c [][]     instrument pitch.
+06e [][]     pitch add. Init with 0.
+070 [][]     init with 0.
+072 [][]     stack id for cycles data in +09c. Init with -1.
+074 [][]     volume distribution (left/right). Init with 0x4000 (center).
+076 [][]     note volume
+078 [][][][] base volume.
+07c [][][][] stored base volume add for timer.
+080 [][]     timer
+082 [][]     stored final
+084 [][][][] base pitch add for timer.
+088 [][][][] base volume add for timer.
+08c [][]     note volume add for timer.
+08e [][]     note volume final value for the timer.
+090 [][]     volume distribution add for timer.
+092 [][]     volume distribution final value for the timer.
+094 [][]     base pitch update timer.
+096 [][]     base volume update timer.
+098 [][]     volume distribution update timer.
+09с stack structs (0xc size)
    +0 []       number of cycles left
    +2 []       stored base pitch.
    +3 []       stored base pitch before jump back.
    +4 [][][][] sequence position.
    +8 [][][][] sequence position before jump back.
+0ce [][]     init with 0.
+0d0 [][]     pitch related. Init with 0.
+0d2 [][]     volume mod
+0d4 [][]     volume distribution add.
+0d8 start of some data.
+0d8 [][][][] function to call.
+0ec [][]     some wait timers.
+0f6 [][]     init with 0.
// some additional data related with bu[smd + 15]



8006f08c array of structs with size 0x10. 0xc items.
+00 []       store 0x80 here.
+01 []       store 0x00 here.
+02 [][]     store
+04 [][][][] store w[src + 28] of snd file here.
+08 [][][][] store size of snd instruments adpcm (w[src + 14]) here.



allocated place for sprite data (size 0x164).
+  0 [][][][] some flags.
+  c [][][][] init with 0 in some cases.
+ 10 [][][][] init with 0 in some cases.
+ 14 [][][][] init with 0 in some cases.
+ 18 [][][][] init with 0 in some cases.
+ 1c [][][][] some multiplication of +82 with w[80058810 + 28] + 1
+ 20 [][][][] pointer to +b4.
+ 24 [][][][] pointer to +110.
+ 28 [][][][] packet header 2C808080.
+ 2b []       init with 0x2d.
+ 2c [][]     scale of sprite. Init with 0x1000.
+ 30 [][]     init with 0.
+ 32 [][]     init with 0.
+ 34 [][]     frame id to render. Init with 0.
+ 36 [][]     some data from frame_data + 3 * sprite scale. Maybe frame offset.
+ 38 [][]     some data from frame_data + 1 * sprite scale. Maybe frame offset.
+ 3a [][]     init with 0.
+ 3c [][][][] init with 0. Some flags.
                0x00000004 - call some other function after packet creation.
                0x00000008 - invert tile x and width.
                0x00000010 - invert tile y and height.
                0x0000ff00 - mask of add tiles.
                0x00000800 - different queue inserting.
                0x10000000 - add if we set scale.
+ 3e [][]     hu[S3 + 3e] & 00f0 palette id to load.
+ 40 [][][][] init with 0. Some flags.
                0x000000fc - number_of_tiles in current render.
                0x00001f00 - scale
+ 44 [][][][] pointer to loaded sprite pack.
+ 48 [][][][] pointer to sprite pack.
+ 4c [][][][] 
+ 50 [][][][] init with 0.
+ 54 [][][][] pointer to some data related with sprite direction in sprite data file 0.
+ 58 [][][][] pointer to animation data in sprite data file 0.
+ 5c [][][][] pointer to animation data in sprite data file 0 + 6.
+ 60 [][][][] pointer to 1st animation data in sprite data file 0.
+ 64 [][][][] pointer to sprite sequence data from file 0.
+ 68 [][][][] init with 0.
+ 6c [][][][] init with 0. Pointer to itself (allocated struct start).
+ 70 [][][][] init with 0.
+ 7c [][][][] pointer to +f4.
+ 80 [][]     init with 0. Maybe direction.
+ 82 [][]     not inited but used co calculate +1c.
+ 84 [][]     init with 0.
+ 86 [][]     size of allocated data (0x164).
+ 8c []       init with 0x10.
+ 9e [][]     init with 0x0001.
+ a0 [][][][] some flags related with +a8.
+ a8 [][][][] init with 0. Some flags.
                0x0001f800 - frame id data id in sprite file 0.
+ ac [][][][] init with 0x00020000.
                0x00000010 - invert offset x.
                0xff000000 - animation id to play.
+ b0 [][][][] init with 0.
+ b4 start of some data (+20 points here)
    + 00 [][]     rotation x.
    + 02 [][]     rotation y.
    + 04 [][]     rotation z.
    + 06 [][]     scale x. Init with 0x1000.
    + 08 [][]     scale y. Init with 0x1000.
    + 0a [][]     scale z. Init with 0x1000.
    + 0c [][]     rot matrix 00.
    + 0e [][]     rot matrix 01.
    + 10 [][]     rot matrix 02.
    + 12 [][]     rot matrix 10.
    + 14 [][]     rot matrix 11.
    + 16 [][]     rot matrix 12.
    + 18 [][]     rot matrix 20.
    + 1a [][]     rot matrix 21.
    + 1c [][]     rot matrix 22.
    + 20 [][][][] translation x.
    + 24 [][][][] translation y.
    + 28 [][][][] translation z.
    + 2c [][][][] pointer to allocated data for tiles data.
    + 30 [][][][] pointer to allocated current render tile data
        +00 [][]     x tile pos
        +02 [][]     y tile pos
        +04 []       texture x
        +05 []       texture y
        +06 []       width
        +07 []       height
        +08 []       width increase
        +09 []       height inscease
        +0a [][]     tpage
        +0c [][]     clut id
        +10 [][][][] 2c808080 - command + color vertex 0
        +14 [][][][] flags
                        0x00000007 - additional tile data id
                        0x00000008 - ???
                        0x00000010 - flip horizontal
                        0x00000020 - flip vertical
    + 34 [][][][] pointer to +124.
    + 38 [][][][] pointer to next sprite structure. Init with 0.
    + 3c []       offset x.
    + 3d []       offset y.
+ f4 start of some data (+7c points here)
    + 00 [][][][] init with 0.
    + 04 [][][][] init with 0.
    + 08 [][][][] init with 0.
    + 0c [][]     init with 0.
    + 0e [][][][] some tx.
    + 18 [][][][] init with 0. Some pointer.
+110 start of texture data for sprite
    + 00 [][][][] pointer to sprite file 1.
    + 04 [][]     tx
    + 06 [][]     ty
    + 08 [][]     clut x
    + 0a [][]     clut y
    + 0c [][][][] pointer to sprite data 2.
    + 10 [][][][] pointer to sprite data 0.
+124 additional tile data (0x08 size 0x08 items)
    + 00 []       translation x
    + 01 []       translation y
    + 02 [][]     rotation x
    + 04 [][]     rotation y
    + 06 [][]     rotation z
