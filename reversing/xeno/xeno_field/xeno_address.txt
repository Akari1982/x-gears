80059aa4 array of offsets to player sprite datas by party slot. (size 0x04)

80059ad4 array of party slot - entity id association. (size 0x04).
80059ad8 [][][][] entity id in party 2.
80059adñ [][][][] entity id in patry 3.

80061c20 [][][][] party member 1.
80061c24 [][][][] party member 2.
80061c28 [][][][] party member 3.

80064f6c          extract part 6 of fieldfile here.

80065198 [][][][] store entity id which perform move here during func821cc.

800acff4          we read something from here during rotation set. We will not set 80115cdc + 108 if this is not 0.

800ad040 [][][][] init with 0. checked in move function (func821cc) as well as some other condition to make entity play run animation if equal to 1.

800ad070 [][][][] checked if equal to 0 in func83f40.

800ad0b8 [][][][] if this is 0 - we dont perform something in funca15c0 (move related).
800ad0bc [][][][] if this is 0 - we dont perform something in funca15c0 (move related).
800ad0c4 [][][][] if this is 0 - we dont perform something in funca15c0 (move related).

800ad0c8 [][][][] pointer to field dialogs block (file 7).
800ad0cc [][][][] pointer to field triggers (file 8).
800ad0d0 [][][][] pointer to field entity file (file 5).
800ad0d4 [][][][] number of entity.
800ad0d8 [][][][] offset to field scripts in file 5.
+0 []       use spawn table? (0xff - not use). Which table to use defined in 2nd slot in memory block. Used in function func9efe4.
spawn table
+0 [][]     x
+2 [][]     z
+4 []       walkmesh id.
+5 []       if 0xff - use value from slot 8 in memory block.
+6 []       rotation. If 0xff - use rotation from slot 6 in memory block. (8 directions)

800ad0e4 [][][][] checked if equal to 1 in func83f40.
800ad0e8 [][][][] some index in 0x1f800000. Maybe move stack?

800ad480 default material walking rotation (size 0x02. items 0x08)
    000C 000E 0000 0002 0004 0006 0008 000A
800ad49c default material walking speed. (size 0x02. items 0x4)
    0400 0800 1000 2000

800ad778          opcodes table. (size 0x4).
800adb78          extended opcodes table. (size 0x4).

800adf08          data for rotation (each 2 bytes)

800aec3c          some data during texture set (func910b0).

800aeeba [][]     store some direction here. maybe for camera. func9efe4.
800aeec4 [][][][] store some direction here. maybe for camera. func9efe4.
800aeee0 [][][][] store some direction here. maybe for camera. func9efe4.

800aefe0 [][][][] number of entity.
800aefe4 [][][][] pointer to model/sprite entity data (size 0x5c each).
    +   0 [][][][] pointer to allocated 0x24 size struct (only for models).
        +  4 [][][][] pointer to start of model parts header.
        +  8 [][][][] pointer to allocated memory for 1st packets buffer.
        +  c [][][][] pointer to allocated memory for 2nd packets buffer.
        + 14 [][][][] pointer to data for +1c things. (allocated as number of item in +1c * 20 + 14 size)
            header (0x14 size)
            +  0 [][][][] pointer to part data.
            +  4 [][][][] offset to original vertex block +8.
            +  8 [][][][] offset to original additional vertex block +c.
            +  c [][][][] number of items in +1c.
            + 10 [][][][] pointer to next data (+4 from this address);
            data (size 0x20 each)
            +  0 [][][][] init with 8002ff5c. Set to 8008002c during entity initialization.
            +  4 [][][][] init with 0.
            +  8 [][][][] init with 0.
            +  c [][][][] init with 0.
    +   4 [][][][] offset to sprite data (0x164 size).
        +  0 [][][][] some flags.
        +  6 [][]     ??? checked with +84.
        +  c [][][][] animation move x. init with 0 in some cases.
        + 10 [][][][] animation move y. init with 0 in some cases. When move set as [struct_138 + f0] >> 1.
        + 14 [][][][] animation move z. init with 0 in some cases.
        + 18 [][][][] move speed. Set to 0 if +6 == 84. If animation id == 2 (run) set as +82 * 60 else +82 * 30.
        + 1c [][][][] some multiplication of +82 with w[80058810 + 28] + 1 and +ac (0x001ffe00) and data from flags in animation data.
        + 20 [][][][] pointer to +b4.
        + 24 [][][][] pointer to +110.
        + 28 [][][][] packet header 0x2c808080 or 0x2b during init.
        + 2b []       init with 0x2d.
        + 2c [][]     scale of sprite. Init with 0x1000.
        + 30 [][]     init with 0.
        + 32 [][]     store rotation here. Init with 0.
        + 34 [][]     frame id to render. Init with 0.
        + 36 [][]     some data from frame_data + 3 * sprite scale. Maybe frame offset.
        + 38 [][]     some data from frame_data + 1 * sprite scale. Maybe frame offset.
        + 3a [][]     init with 0. Some scale. Multiplied with rotation matrix.
        + 3c [][][][] init with 0. Some flags.
                        0x00000003 - set to 1 during init. If 1 then remove sprite offset in b4+3c and b4+3d.
                                        0x1 - init animation.
                        0x00000004 - call some other function after packet creation.
                        0x00000008 - invert tile x and width.
                        0x00000010 - invert tile y and height.
                        0x0000ff00 - mask of add tiles.
                        0x00000800 - different queue inserting.
                        0x10000000 - add if we set scale.
        + 3e [][]     hu[S3 + 3e] & 00f0 palette id to load.
        + 40 [][][][] init with 0. Some flags.
                        0x00000001 - if set we calculate rotation matrix and multiply it with matrix stored in 0x80018614 (maybe for debug or for some special effect).
                        0x000000fc - number_of_tiles in current render.
                        0x00001f00 - scale
                        0x0001e000 - removed during init.
                        0x00020000 - this struct was added to sprite struct list.
                        0x00080000 - if set we init frame.
                        0x00100000 - add when we starting animation. If 0 and +3c 0x00000003 == 1 and b4+34 != 0 then reset all data in +124 (add rot and trans).
        + 44 [][][][] pointer to loaded sprite pack.
        + 48 [][][][] pointer to sprite pack.
        + 4c [][][][] pointer to some sprite pack (used if animation id < 0).
        + 50 [][][][] init with 0.
        + 54 [][][][] pointer to some data related with sprite direction in sprite data file 0.
        + 58 [][][][] pointer to animation data in sprite data file 0.
        + 5c [][][][] pointer to animation data in sprite data file 0 + 6, set when sprite has only two directions (one animation sequence).
        + 60 [][][][] pointer to 1st animation data in sprite data file 0.
        + 64 [][][][] current pointer to sprite sequence data from file 0. Init with 0.
        + 68 [][][][] init with 0.
        + 6c [][][][] init with 0. Pointer to itself (allocated struct start).
        + 70 [][][][] init with 0.
        + 7c [][][][] pointer to +f4.
        + 80 [][]     init with 0. Maybe direction.
        + 82 [][]     not inited but used co calculate +1c. Set to +18 as * 30 or * 60.
        + 84 [][]     init with 0. Checked with +6.
        + 86 [][]     size of allocated data (0x164).
        + 8c []       pointer to item in stack +8e. Init with 0x10.
        + 8e start of stack for positions in script for function calls.
            + 0 []       1st byte.
            + 1 []       2nd byte.
            + 2 []       3rd byte.
        + 9e [][]     animation script wait timer. Init with 0x0001.
        + a8 [][][][] init with 0. Some flags.
                        0x00000001 - set if bu[80058810 + 3d] == 0, removed otherwise. Reset f4+0, f4+4, f4+c if set.
                        0x000007fe - removed when start animation.
                        0x0001f800 - direction frame id (frames differ for different direction).
                        0x000e0000 - direction animation id.
                        0x00300000 - store here flags from animation data 0x0003. Looks like this types of direction behaviour in animation.
                                        0x00 - 2 direction sprite.
                                        0x01 - 4 direction sprite.
                                        0x02 - 8 direction sprite.
                        0x0fc00000 - removed when start animation.
                        0x30000000 - init with 2 when start animation.
        + ac [][][][] init with 0x00020000.
                        0x00000010 - invert offset x.
                        0x00000020 - invert offset y.
                        0x001ffe00 - something multiplied and stored to +1c.
                        0xff000000 - animation id to play.
        + b0 [][][][] some flags. Init with 0.
                        0x000000ff - animation to play when we end animation script with 0x81 opcode. Maybe default animation id.
                        0x00000400 - remove this if we restarting animation. Add otherwise.
        + b4 start of some data (+20 points here)
            +  0 [][]     rotation x.
            +  2 [][]     rotation y.
            +  4 [][]     rotation z.
            +  6 [][]     scale x. Init with 0x1000.
            +  8 [][]     scale y. Init with 0x1000.
            +  a [][]     scale z. Init with 0x1000.
            +  c [][]     rot matrix 00.
            +  e [][]     rot matrix 01.
            + 10 [][]     rot matrix 02.
            + 12 [][]     rot matrix 10.
            + 14 [][]     rot matrix 11.
            + 16 [][]     rot matrix 12.
            + 18 [][]     rot matrix 20.
            + 1a [][]     rot matrix 21.
            + 1c [][]     rot matrix 22.
            + 20 [][][][] translation x.
            + 24 [][][][] translation y.
            + 28 [][][][] translation z.
            + 2c [][][][] pointer to allocated data for tiles data.
            + 30 [][][][] pointer to allocated current render tile data
                + 0 [][]     x tile pos
                + 2 [][]     y tile pos
                + 4 []       texture x
                + 5 []       texture y
                + 6 []       width
                + 7 []       height
                + 8 []       width increase
                + 9 []       height inscease
                + a [][]     tpage
                + c [][]     clut id
                +10 [][][][] 2c808080 - command + color vertex 0
                +14 [][][][] flags
                                0x00000007 - additional tile data id
                                0x00000008 - ???
                                0x00000010 - flip horizontal
                                0x00000020 - flip vertical
            + 34 [][][][] pointer to +124.
            + 38 [][][][] pointer to previous sprite structure (struct_164). Init with 0.
            + 3c []       offset x.
            + 3d []       offset y.
        + f4 start of some data (+7c points here)
            +  0 [][][][] init with 0.
            +  4 [][][][] init with 0.
            +  8 [][][][] init with 0.
            +  c [][]     init with 0.
            +  e [][][][] some tx.
            + 18 [][][][] init with 0. Some pointer.
            + 38 [][][][] init with 0.
        +110 start of texture data for sprite
            +  0 [][][][] pointer to sprite file 1.
            +  4 [][]     texture x.
            +  6 [][]     texture y.
            +  8 [][]     clut x
            +  a [][]     clut y
            +  c [][][][] pointer to sprite data 2.
            + 10 [][][][] pointer to sprite data 0.
        +124 additional tile data (0x08 size 0x08 items)
            +  0 []       translation x
            +  1 []       translation y
            +  2 [][]     rotation x
            +  4 [][]     rotation y
            +  6 [][]     rotation z
    +   8 [][][][] pointer to allocated memory for model shadow (0x70 size).
        +  0 [][]     vertex0 x.
        +  2 [][]     vertex0 y.
        +  4 [][]     vertex0 z.
        +  8 [][]     vertex1 x.
        +  a [][]     vertex1 y.
        +  c [][]     vertex1 z.
        + 10 [][]     vertex2 x.
        + 12 [][]     vertex2 y.
        + 14 [][]     vertex2 z.
        + 18 [][]     vertex3 x.
        + 1a [][]     vertex3 y.
        + 1c [][]     vertex3 z.
        + 20 some packet for 1st buffer (maybe shadow under model) (size 0x28).
        + 48 some packet for 2nd buffer draw (size 0x28).
            +  3 []       init with 0x09.
            +  4 []       R. init with 0x80.
            +  5 []       G. init with 0x80.
            +  6 []       B. init with 0x80.
            +  7 []       init with 0x2c.
            +  c [][]     uv 0.
            +  e [][]     clut. 100 f3
            + 14 [][]     uv 1.
            + 16 [][]     tex page.
            + 1c [][]     uv 2.
            + 24 [][]     uv 3.
    +  1e          solid range.
    +  20 [][][][] some X data.
    +  24 [][][][] some Y data.
    +  28 [][][][] some Z data.
    +  40 [][][][] some X data.
    +  44 [][][][] some Y data.
    +  48 [][][][] some Z data.
    +  4c [][][][] pointer to allocated total entity data (0x138 size).
        +   0 [][][][] entity flags (0x000000b0 init).
                       0x00000001: if flag is set - scripts will be not runned. In addition it make entity not solid (maybe this is turn entity off (ie it will not calculated at all))
                       0x00000002: flag added if 0x2A opcode called in this entity.
                       0x00000004: can be set in 0x20_SetFlags.
                       0x00000008: can be set in 0x20_SetFlags.
                       0x00000010: not pushable.
                       0x00000020: can be set in 0x20_SetFlags.
                       0x00000080: not solid.
                       0x00000100: NPC character (initialization with 0xBC and 0x0B opcodes) (movement material check).
                       0x00000200: PC follower (movement material check).
                       0x00000400: PC entity (player entity and this is patry leader. Seems like manipulatable entity) (movement material check).
                       0x00000800: 
                       0x00004000: if we remove this flag - entity not move, menu not called. Checked in move function. If this flag is set and (hu[800af370] & 0040) && (w[800ad040] == 1) then we set animation_id 2 (run) to play instead of 1 (walk).
                       0x00010000: removed in 0x19_SetPosition.
                       0x00020000: added during initialization with 0x16 (SetPlayableCharacter) opcode.
                       0x00040000: removed during set position by x z.
                       0x00100000: if set then this entity (door) opened else closed.
                       0x00400000: flag added in SpriteGoToPosition opcode. Looks like make step to direction. Set during set position by x z. Maybe update position?
                       0x01000000: if this bit is set we will not perform move (we just skip movement).
                       0x04000000: add this bit if we can move where we want to move (in movement function after all checks).
                       0x08000000: can be set in 0x20_SetFlags.
        +   4 [][][][] entity flags 2 (0x00000800 init).
                       0x00000001:
                       0x00000002:
                       0x00000078: ignore walkmeshes material flags. Set - ignore.
                       0x00000800: remove this flag during initialization in 0x0B opcode (with model). Add it in 0xBC opcode. Looks like if this entity has model or not.
                       0x00001000: remove this flag after move is done.
                       0x00002000:
                       0x00200000: removed in 0x19_SetPosition.
        +   8 [][]     triangle id for walkmesh 0.
        +   a [][]     triangle id for walkmesh 1.
        +   c [][]     triangle id for walkmesh 2.
        +   e [][]     triangle id for walkmesh 3.
        +  10 [][]     walkmesh id (0 by default).
        +  14 [][][][] store current walkmesh triangle material here.
        +  18 [][]     x width of entity. Init with 0x10.
        +  1a [][]     height if entity. Init with 0x60
        +  1c [][]     z width of entity. Init with 0x10.
        +  1e          solid range. Init from +18 (0x10).
        +  20 [][][][] current X.
        +  24 [][][][] current Y.
        +  28 [][][][] current Z.
        +  30 [][][][] modified move vector X.
        +  34 [][][][] modified move vector Y.
        +  38 [][][][] modified move vector Z.
        +  40 [][][][] move vector X.
        +  44 [][][][] move vector Y.
        +  48 [][][][] move vector Z.
        +  50 [][][][] normal X to current triangle.
        +  54 [][][][] normal Y to current triangle.
        +  58 [][][][] normal Z to current triangle.
        +  60 [][]     maybe X. Init with 0 when set position by x z
        +  62 [][]     maybe Y. Init with 0 when set position by x z
        +  64 [][]     maybe Z. Init with 0 when set position by x z
        +  68 [][]     X. Init from +22.
        +  6a [][]     Y. Init from +26.
        +  6c [][]     Z. Init from +2a.
        +  6e [][]     init with 0.
        +  72 [][]     store current Y pos here.
        +  74 []       follow entity id. Init with 0xff. We dont calculate interaction with this entity.
        +  75 []       init with 0xff.
        +  76 [][]     init with 0x0100.
        +  80 []       store character id here when we set avatar. Init with 0xff.
        +  81 []       store something from here to memory block + 14. Dialog related. Maybe cursor position.
        +  82 []       something dialog related. Init with 0.
        +  83 []       something dialog related. Init with 0.
        +  84 [][][][] something dialog related. Init with 0.
        +  88 [][]     something dialog related. Init with 0.
        +  8a [][]     something dialog related. Init with 0.
        +  8c start of slots (0x8 size 0x8 items)
            +0 [][]     pointer to requested script this slot. Init with 0xffff.
            +2 []       wait byte in this slot. Init with 0.
            +3 []       script id in this slot. Store 0xff  in 0x00_Return. Init with 0xff.
            +4 [][][][] flags for script this slot (script priority among them).
                           0x00030000: remove during init.
                           0x003c0000: priority. Lower value - higher priority. Init with 0x3c.
                           0x00600000: remove during init.
                           0x01800000: how read argument in move reading function. (SpriteGoToPosition(vf80 x, vf40 y, f flag) - 0x00). Unknown setting. When add auto script during collision add script only if this not 1. Remove during init.
                           0x0000ffff: seems like number of steps to move. (SpriteGoToPosition == 0x0000ffff). Init with 0xffff.
            here 7 more requersed script data 8 bytes each.
        +  cc [][]     current script pointer. Init with 0.
        +  ce []       current script slot id. Used in 0x00_Return. Init with 0.
        +  cf []       byte to get data for Requests. Init with 0.
        +  d0 [][][][] maybe current X. Init with 0 when set position by x z
        +  d4 [][][][] maybe current Y. Init with 0 when set position by x z
        +  d8 [][][][] maybe current Z. Init with 0 when set position by x z
        +  e2 []       init with 0. Current step when opening or closing door.
        +  e3 []       if this is >= 9 then we discrease it by 1 every step in move function. Init with 0.
        +  e4 [][]     we store character id here. Init with 0x00ff.
        +  e6 [][]     init with 0. we store animation id to play here in SpritePlayAnimation2. Looks like default animation.
        +  e8 [][]     playing animation id. When entity is moving we store here animation id acording to that movement (1,2 and so on). Init with 0.
        +  ea [][]     init with 0xff. We store animation id to play here in SpritePlayAnimation.
        +  ec [][][][] init with 0 when set position by x z. Init with 0.
        +  f0 [][][][] init with 0 when set position by x z.
        +  f4 [][]     init with 0x1000. X related.
        +  f6 [][]     init with 0x1000. Y related.
        +  f8 [][]     init with 0x1000. Z related.
        +  fc []       init with 0x80.
        +  fd []       init with 0x80.
        +  fe []       init with 0x80.
        +  ff []       init with 0x80.
        + 100 []       init with 0x80.
        + 101 []       init with 0x80.
        + 102 [][]     Init with two random bytes.
        + 104 [][]     we store rotation data here, also set during DialogShow (flags). Seems like current rotation. Init with 0x8000.
        + 106 [][]     we store rotation data here. Init with 0x8000.
        + 108 [][]     we store rotation data here (if 800acff4 == 0). Init with 0x8000.
        + 10d []       init with 0xff.
        + 110 [][][][] pointer to something with size 0xc
        + 114 [][][][] pointer to some quad data. This quad restrict whole move area.
        + 118 [][][][] pointer to allocated 0x80 byte for +1c data. Size 0x4 for each +1c item.
            +  0 [][][][] init with 0.
        + 11e [][]     init with 0x0200.
        + 120 [][][][] init with 0.
        + 124 [][][][] init with 0x0000ffff.
        + 128 [][][][] init with 0x0000ffff.
        + 12c [][][][] flags.
                        0x00000003 - remove during entity init.
                        0x0000001c - remove during entity init.
                        0x00000020 - if set - door opening or closing. Remove during init.
                        0x000001c0 - remove during entity init.
                        0x00000e00 - remove during entity init.
                        0x00001000 - remove during entity init. Checked in func81aa8().
                        0x0000e000 - index in model pointers 801e8670.
                        0x00030000 - remove during entity init.
                        0x0ffc0000 - remove during entity init.

        + 130 [][][][] flags.
                        0x000001ff - remove during entity init.
                        0x0007fe00 - remove during entity init.
                        0x0ff80000 - remove during entity init.
        + 134 [][][][] flags.
                        0x00000060 - remove during entity init.
                        0x00000080 - remove during entity init.
    +  50 [][]     X rotation.
    +  52 [][]     Y rotation (door opened with this).
    +  54 [][]     Z rotation.
    +  58 [][]     flags
                   0x000c: 0 - not calculate lighting
                           1 - calculate lighing but not store it
                           2 - calculate and store lighing for the first time and then use stored data
                           3 - calculate lighing and store it
                   0x0020: set if 0x0040 flag == 1 during init. Set in 0x29 and 0x23(only) opcode. Remove if we init this entity as player.
                   0x0040: model or sprite not loaded yet.
                   0x0080: if this is 0 - we set height for model depending on triangle.
                   0x0f00: if at least one of this bits exist - we perform something inside funca15c0 (move related).
                   0x2000: init +1c in model data if this is set.
    +  5a [][]     init with 0.

800aefe8 [][][][] pointer to field model pack (field file 2).
800aefec [][][][] pointer to waklmesh data (field file 1).
800aeff0 [][][][] offset to 2dsprite block in field file.
800aeff4 [][][][] offset to material data in walkmesh file.
800aeff8          array of 4 offsets to triangle data.
800af008          array of 4 offsets to triangle vertex data.
800af018          array of 4 blocks number of triangles.
800af028 [][][][] number of walkmesh blocks.

800af148 [][][][] every time we init entity model with func76150 we increment this by 1.

800af150 [][][][] store here how much opcodes to execute in run_script.

800af1e4 [][][][] number of materials.

800af1f0 [][][][] current entity id.
800af1f4 [][]     store 0xff40 here if we init player entity.

800af370 [][]     some flags. Checked hu[800af370] & 0040 in move function (func821cc) as well as some other condition to make entity play run animation.

800af4c0 [][][][] if this is 0 then we execute script till the end (or until wait type opcode). If 1 together with 800af594 then we end script cycle.

800af54c [][][][] offset to struct 0x138 for current entity.

800af594 [][][][] seems like return result from function (wait opcode returns 1). Set to 0 at start of run_script function.

800afb8c [][][][] offset to struct 0x5c for current entity.

800b144c copy first 0x100 byte of field file here.

800b1654 [][][][] increment during each entity initialization.

800b1660 [][][][] move length (1 << 0xc)

800b168c [][][][] store here id of sound to play.

800b16a0 []       if this is not 0 we nulify triangle material mask. If this not 0 we do not run scripts for party character entity (in funca15c0 (move related)).

800b16aa [][]     if this != 8 then dialog speed doubled (store 2 instead of 1)

800b1740 [][][][] store entity id which controls party leader here.

800b1812 [][]     store entity id which controls party leader here.

800b1818 [][]     do something animation related during movement if this is 0.
800b181a [][]     maybe default animation id. Init with 3.

800c1b68 [][]     button mask. Maybe pressed (not repeated) button mask?

800c1b6c          dialogs struct (0x498 size)(4 items)
+ 18 [][]     store 0x64 here in case of new row. Maybe how much symbols in new row we can put.
+ 1a [][]     
+ 22 [][]     total number of symbols???
+ 28 [][]     some flags
                0x0008: add this flag if we met 0x00_Close text opcode and there is no 0x0080 flag here or if we met 0x03_Wait text opcode. Maybe wait for player input? If this flag is set we read +83.
                0x0048: add this flags if we met 0x02_New text opcode.
                0x0200: add this flag in 0x0F0D text opcode.
+ 2a [][]
+ 34 [][][][] pointer to current position in text data
+ 38 [][][][] some pointer.
+ 40 [][][][] some pointer.
+ 44 [][][][] some pointer.
+ 80 []       default text speed.
+ 81 []       current text speed. How much text read in one function call. 2 symbols opcodes counted as one.
+ 82 []       stored text speed (to restore if we want).
+ 83 []       state? Set to 1 if we met 0x00_Close text opcode. Set to 2 if we met 0x02_New text opcode. Set to 3 if we met 0x03_Wait text opcode.
+ 84 []       store 1 here if we met 0x00_Close text opcode or if we met 0x0F02 text opcode.
+ 88 [][][][] +0016 from memory block.
+ 8c [][][][] +0018 from memory block.
+ 90 [][][][] +001a from memory block.
+ 94 [][][][] +001c from memory block.
+ 98 [][]     +001c from memory block.
+ 9a [][]
+ 9c [][]     store time to delay output here if we met 0x0F00_Delay text opcode or if we met 0x0F02 text opcode.
+ 9e [][]     store value for 0x0F0E text opcode here.
+ a0 [][]     store value for 0x0F0E text opcode here.
+ a8 [][][][] offset to dialog text data.
+37c [][]
+3c4 [][]     we store 0 here if 37c != 0 and 83 != 0 and 28 flag 0x0008 is set
+40c [][]     
+40e [][]     
+410 [][]     looks like order of dialogs. 0-top. 0xffff if window not inited.
+414 [][]     we set this to 0 if we tried to open new window but all window slots are filled. Maybe say this window to close. Usually 0xffff (not used in usual window render)
+416 [][]     some entity id??? maybe owner.
+418 [][]     some entity id???



800c2f3c          memory block. used in get_bytes_from_800C2F3C.
+ 0000 [][]     progress
+ 0002 [][]     spawn slot id (used when spawn pc)
+ 0004
+ 0006 [][]     direction of pc entity during spawn.
+ 0008 [][]     direction of camera?
+ 0014 [][]     related to displayed window. Store something here during 0x9c opcode. Maybe cursor position.
+ 0016 [][]     slot1 for dialog temp variable.
+ 0018 [][]     slot2 for dialog temp variable.
+ 001a [][]     slot3 for dialog temp variable.
+ 001c [][]     slot4 for dialog temp variable.
800c373c [][][][] maybe number of inited windows.
800c3740          end of memory block.

8010b6a0        [800AD0D0]  entity file.

8010bc24        [800AD0D8]  scripts block.



8012c138 some entity data. 80114f2c+4 pointer.
+  00 [][][][] some X.
+  04 [][][][] some Y.
+  08 [][][][] some Z.
+  0c [][][][] some X. Init with 0 when set position by x z
+  10 [][][][] some Y. Init with 0 when set position by x z
+  14 [][][][] some Z. Init with 0 when set position by x z
+  18 [][][][] we store 08000000 / hu[current_entity_data + 76] here if 00002000 flag in 80115cdc+4 set. Set to 04000000 / hu[current_entity_data + 76] if 00002000 flag in 80115cdc+4 not set but this (+  18) == 0. In movement set function.
+  84 [][]     store some Y here.



801e85f4 model data to init (0x8 size 0x8 items).
+0 [][][][] pointer to array that contains pointer to all model parts (dynamicly allocated).
+4 [][][][] number of parts in this model.



801e8634 [][][][] Temp index of currently inited model (index into 801e85f4). Store address of inited model 3d data here.
801e8638 [][][][] store address model 3d data here.

801e8670 looks like array of pointers to the model data? If this is not 0 during load - then we will not load model.



model struct (size 0x134)
+  0 [][][][] pointer to 801e85f4 item of this model.
+  4 [][][][] pointer to allocated place for skeleton (0x7c size).
+  8 [][][][] pointer to animation sub file addreses animation_0_1, animation_0_2 and so on.
+  c [][][][] init with 0.
+ 10 [][][][] init with 0. Store pointer to animation file like animation_0_1-animation_0_X.
+ 14 [][][][] pointer to animation_0_0.
+ 18 [][][][] init with 0.
+ 1c [][]     store 2 bytes from model_3_0 + 8 here.
+ 1e [][]     init with -1.
+ 20 []       model id or some other index???
+ 22 []       init with 0.
+ 23 []       init with 0.
+ 24 [][]     store 2 bytes from model_3_0 + 2 here.
+ 26 [][]     store 2 bytes from model_3_0 + 4 here.
+ 28 [][]     store 2 bytes from model_3_0 + 6 here.
+ 2a []       store byte from model_3_0 + a here.
+ 2b []       init with 0.
+ 34 []       init with 1.
+ 35 []       init with 0.
+ 36 []       init with 0.
+ 37 []       init with 0.
+ 38 []       init with 0.
+ 39 []       init with 0x6b.
+ 3a [][]     init with -1.
+ 3c [][]     init with -1.
+ 40 [][]     init with 0.
+ 42 [][]     init with 0.
+ 4a [][]     store 2 bytes from model_3_0 + c here.
+ 4c [][][][] init with 0.
+ 50 [][][][] init with 0.
+ 54 [][][][] init with 0.
+ 58 [][]     init with 0.
+ 5c []       init with -1.
+ 62 []       store 0 here during init.
+ 63 []       store 0 here during init.
+ 70 [][]     init with 0. Some root X rotation.
+ 72 [][]     init with 0. Some root Y rotation.
+ 74 [][]     init with 0. Some root Z rotation.
+ 76 [][]     init with 0. Some addition to +70.
+ 78 [][]     init with 0. Some addition to +72.
+ 7a [][]     init with 0. Some addition to +74.
+ 7c [][]     init with 0. X something.
+ 7e [][]     init with 0. Y something.
+ 80 [][]     init with 0. Z something.
+ 82 [][]     init with 0. Some addition to +7c.
+ 84 [][]     init with 0. Some addition to +7e.
+ 86 [][]     init with 0. Some addition to +80.
+ 88 [][]     init with 0.
+ 8a [][]     init with 0.
+ 8c [][]     init with 0.
+ 8e [][]     init with 1.
+ 90 [][]     TX as 0x3c0. or -1 if default TX TY clutX and clutY not used.
+ 92 [][]     TY as 0x100.
+ 94 [][]     clutX.
+ 96 [][]     clutY.
+ 98 [][]     init with -1.
+ ac [][][][] store animation file pointer here (or 0).
+ b0 [][][][] store pointer to animation_1 here.
+ b8 start of two quad monochrome textured packet (0x28 size)
+10a [][]     store here 2 bytes from 801e863c.
+10c []       store 1 byte from model_3_0 + e here. Number of something.
+10d []       store 1 byte from model_3_0 + 12 here. Number of something.
+10e []       store 1 byte from model_3_0 + 10 here. Number of something.
+110 [][][][] pointer to allocated place for something with size 0x70.
+118 [][][][] pointer to allocated place for something with size 0x30.



allocated place for skeleton ((number_of_bones + 1) * 0x7c)
+  0 [][][][] store 0 here or pointer to parent bone data.
+  4 []       store 1 here during init.
+  5 []       store 1 here during init.
+  6 []       store 0 here during init. In case of root store 1.
+  7 []       store 1 here during init. In case of root store 0. Some flags.
+  8 [][]     store part id here during init (ffff if there is no part).
+  a []       index of bone? start with 1. Increment with each bone. In case of root store number of bones here.
+ 2c          matrix in standart GTE format.
+ 4c [][]     store 1000 here during init. Scale X?
+ 4e [][]     store 1000 here during init. Scale Y?
+ 50 [][]     store 1000 here during init. Scale Z?
+ 52 [][]     store 0 here during init.
+ 54 [][]     store 0 here during init. Bone rotation X.
+ 56 [][]     store 0 here during init. Bone rotation Y.
+ 58 [][]     store 0 here during init. Bone rotation Z.
+ 5c [][][][] store 0 here during init. Bone translation X.
+ 60 [][][][] store 0 here during init. Bone translation Y.
+ 64 [][][][] store 0 here during init. Bone translation Z.
+ 68 [][][][] pointer to 1st packets buffer.
+ 6c [][][][] pointer to 2nd packets buffer.
+ 70 [][][][] store 0 here during init. Pointer to some rotation data (allocated place for skeleton animations data).
+ 74 [][][][] store 0 here during init. Pointer to some translation data (allocated place for skeleton animations data).
+ 78 [][][][] store 0 here during init.



allocated place for skeleton animations data.
+ 00 []       store 1 here.
+ 01 []       store 0 or 1 here (argument 3 from 0x13 animation opcode)
+ 02 []       store argument 0 from 0x13 animation opcode + 3.
+ 03 []       store id of animation file here.
+ 04 [][]     store current rotation X or translation here.
+ 06 [][]     store current rotation Y or translation here.
+ 08 [][]     store current rotation Z or translation here.
+ 0a [][]     store initial or difference between initial and current rotation X or translation here.
+ 0c [][]     store initial or difference between initial and current rotation Y or translation here.
+ 0e [][]     store initial or difference between initial and current rotation Z or translation here.
+ 10 [][]     store 0 here.
+ 12 [][]     store argument 4 from 0x13 animation opcode here or 1 if argument == 0.



allocated place for something with size 0x70. Number given in model struct with size 0x134 at +10c, offset at +110.
+  0 [][]     store -1 here during initialization.
+  8 [][][][] store 0 here during initialization.



allocated place for something with size 0x30. Number given in model struct with size 0x134 at +10c, offset at +118.
+  4 [][][][] store 0 here during initialization.
+  8 [][][][] store 0 here during initialization.
+  c [][][][] store 0 here during initialization.
+ 1a [][]     store 0 here during initialization.



allocated place for something with size 0x24. Number given in model struct with size 0x134 at +10d, offset at +118.
+  4 [][][][] store 0 here during initialization.
+  8 [][][][] store 0 here during initialization.
+  c [][][][] store 0 here during initialization.
+ 1a [][]     store 0 here during initialization.