////////////////////////////////
// func1def10
// A0 - pointer to bone struct 0x74
// A1 - pointer to animation file animation_0_0_0 - animation_0_0_X

max_rot_num = hu[A1 + c];
max_trans_num = hu[A1 + e];

A2 = hu[A1 + 4];

if (h[A1 + 6] == 0)
{
    A1 = A1 + (max_rot_num + 1) * 6;
}

A1 = A1 + 18;

T8 = A2 & 1;
T7 = A2 & 2;

number_of_bone = hu[A0 + a];
if (number_of_bone > 0)
{
    T0 = 1;
    rot_num = 0;
    trans_num = 0;
    loop1def74:	; 801DEF74
        if (T8 == 0 && rot_num < max_rot_num)
        {
            A3 = h[A1];
            A1 = A1 + 2;
            A2 = h[A1];
            A1 = A1 + 2;
            V1 = h[A1];
            A1 = A1 + 2;

            V0 = w[A0 + T0 * 7c + 70];
            if ((h[A0 + T0 * 7c + 54] != A3 || h[A0 + T0 * 7c + 56] != A2 || h[A0 + T0 * 7c + 58] != V1) && (V0 == 0 || bu[V0 + 3] != ff))
            {
                [A0 + T0 * 7c + 54] = h(A3);
                [A0 + T0 * 7c + 56] = h(A2);
                [A0 + T0 * 7c + 58] = h(V1);

                [A0 + T0 * 7c + 4] = b(1);
                [A0 + T0 * 7c + 5] = b(1);
            }

            rot_num = rot_num + 1;
        }

        if (T7 == 0 && trans_num < max_trans_num)
        {
            A3 = h[A1];
            A1 = A1 + 2;
            A2 = h[A1];
            A1 = A1 + 2;
            V1 = h[A1];
            A1 = A1 + 2;

            V0 = w[A0 + T0 * 7c + 74];
            if ((w[A0 + T0 * 7c + 5c] != A3 || h[A0 + T0 * 7c + 60] != A2 || h[A0 + T0 * 7c + 64] != V1) && (V0 == 0 || bu[V0 + 3] != ff))
            {
                [A0 + T0 * 7c + 5c] = w(A3);
                [A0 + T0 * 7c + 60] = w(A2);
                [A0 + T0 * 7c + 64] = w(V1);

                [A0 + T0 * 7c + 4] = b(1);
            }

            trans_num = trans_num + 1;
        }

        T0 = T0 + 1;
        V0 = T0 < number_of_bone;
    801DF0A0	bne    v0, zero, loop1def74 [$801def74]
}
////////////////////////////////



////////////////////////////////
// func1df0b4
// A1 - pointer to bone struct 0x74
// A2 - pointer to initial skeleton animation file animation_0_0_0 - animation_0_0_X
// A3 - arg4
// A4 - arg0
// A5 - arg3
// A6 - id of animation

801DF0B4	addiu  sp, sp, $ff88 (=-$78)
S7 = A0;
S1 = A2;
[SP + 10] = w(A3);
if (A3 == 0)
{
    [SP + 10] = w(1);
}

T0 = w[SP + 8c];
T0 = T0 & 1;
[SP + 8c] = w(T0);

[SP + 20] = h(0);
[SP + 30] = h(0);

max_rot_num = hu[S1 + c];
[SP + 18] = h(hu[S1 + c]);

max_trans_num = hu[S1 + e];
[SP + 28] = h(hu[S1 + e]);

S6 = h[S1 + 6];
S5 = S5 & 1;
T0 = hu[S1 + 4];
S1 = S1 + 18;

[SP + 40] = h(T0);
if (S6 == 0)
{
    S1 = S1 + (max_rot_num + 1) * 6;
}

[SP + 38] = h(hu[A1 + a] - 1);

V0 = hu[SP + 38];
if (V0 > 0)
{
    S6 = 0;
    S0 = A1 + 74;
    FP = ff;

    L1df17c:	; 801DF17C
        T0 = hu[SP + 40];
        V0 = T0 & 1;
        S0 = S0 + 7c;
        if (V0 == 0)
        {
            V0 = hu[SP + 20];
            T0 = max_rot_num;
            V0 = V0 < T0;

            801DF1A0	beq    v0, zero, L1df338 [$801df338]
            801DF1A4	nop
            801DF1A8	lh     s2, $0000(s1)
            801DF1AC	addiu  s1, s1, $0002
            801DF1B0	lh     s3, $0000(s1)
            801DF1B4	addiu  s1, s1, $0002
            801DF1B8	lh     s4, $0000(s1)
            801DF1BC	addiu  s1, s1, $0002
            801DF1C0	lhu    t0, $0020(sp)
            801DF1C4	lh     v0, $ffe0(s0)
            801DF1C8	addiu  t0, t0, $0001
            801DF1CC	bne    v0, s2, L1df1f4 [$801df1f4]
            801DF1D0	sh     t0, $0020(sp)
            801DF1D4	lh     v0, $ffe2(s0)
            801DF1D8	nop
            801DF1DC	bne    v0, s3, L1df1f4 [$801df1f4]
            801DF1E0	nop
            801DF1E4	lh     v0, $ffe4(s0)
            801DF1E8	nop
            801DF1EC	beq    v0, s4, L1df338 [$801df338]
            801DF1F0	nop

            L1df1f4:	; 801DF1F4
            801DF1F4	lw     v0, $fffc(s0)
            if (V0 != 0)
            {
                801DF204	lbu    v0, $0003(a0)
                801DF208	nop
                801DF20C	beq    v0, fp, L1df364 [$801df364]
                801DF210	nop
            }
            else
            {
                A0 = S7;
                801DF21C	jal    func1df6f0 [$801df6f0]
            }

            A0 = V0;
            801DF228	beq    a0, zero, L1df338 [$801df338]

            [A0 + 0] = b(1);
            [A0 + 1] = b(bu[SP + 8c]);
            [A0 + 2] = b(S5 + 3);
            [A0 + 3] = b(bu[SP + 90]);
            [A0 + 4] = h(hu[S0 - 20]);
            [A0 + 6] = h(hu[S0 - 1e]);
            [A0 + 8] = h(hu[S0 - 1c]);

            S2 = (S2 - h[S0 - 20]) & fff;
            if (S2 >= 800)
            {
                S2 = S2 - 1000;
            }
            [A0 + a] = h(S2);

            S3 = (S3 - h[S0 - 1e]) & fff;
            if (S3 >= 0)
            {
                S3 = S3 - 1000;
            }
            [A0 + c] = h(S3);

            S4 = (S4 - h[S0 - 1c]) & fff;
            if (S4 >= 800)
            {
                S4 = S4 - 1000;
            }
            [A0 + e] = h(S4);

            if (S5 != 0)
            {
                [A0 + a] = h(hu[A0 + a] + hu[S0 - 20])
                [A0 + c] = h(hu[A0 + c] + hu[S0 - 1e])
                [A0 + e] = h(hu[A0 + e] + hu[S0 - 1c])
            }
            [A0 + 10] = h(0);
            [A0 + 12] = h(hu[SP + 10]);

            [S0 - 4] = w(A0);
        }
        else
        {
            L1df338:	; 801DF338
            A1 = w[S0 - 4];
            if (A1 != 0 && (bu[A1 + 3] != ff))
            {
                A0 = S7;
                801DF358	jal    func1df7a8 [$801df7a8]

                [S0 - 4] = w(0);
            }
        }

        L1df364:	; 801DF364
        801DF364	lhu    t0, $0040(sp)
        801DF368	nop
        801DF36C	andi   v0, t0, $0002
        801DF370	bne    v0, zero, L1df4b4 [$801df4b4]
        801DF374	nop
        801DF378	lhu    v0, $0030(sp)
        801DF37C	lhu    t0, $0028(sp)
        801DF380	nop
        801DF384	sltu   v0, v0, t0
        801DF388	beq    v0, zero, L1df4b4 [$801df4b4]
        801DF38C	nop
        801DF390	lh     s2, $0000(s1)
        801DF394	addiu  s1, s1, $0002
        801DF398	lh     s3, $0000(s1)
        801DF39C	addiu  s1, s1, $0002
        801DF3A0	lh     s4, $0000(s1)
        801DF3A4	addiu  s1, s1, $0002
        801DF3A8	lhu    t0, $0030(sp)
        801DF3AC	lw     v0, $ffe8(s0)
        801DF3B0	addiu  t0, t0, $0001
        801DF3B4	bne    v0, s2, L1df3dc [$801df3dc]
        801DF3B8	sh     t0, $0030(sp)
        801DF3BC	lw     v0, $ffec(s0)
        801DF3C0	nop
        801DF3C4	bne    v0, s3, L1df3dc [$801df3dc]
        801DF3C8	nop
        801DF3CC	lw     v0, $fff0(s0)
        801DF3D0	nop
        801DF3D4	beq    v0, s4, L1df4b4 [$801df4b4]
        801DF3D8	nop

        L1df3dc:	; 801DF3DC
        801DF3DC	lw     v0, $0000(s0)
        801DF3E0	nop
        801DF3E4	beq    v0, zero, L1df404 [$801df404]
        801DF3E8	addu   a0, v0, zero
        801DF3EC	lbu    v0, $0003(a0)
        801DF3F0	nop
        801DF3F4	beq    v0, fp, L1df4e0 [$801df4e0]
        801DF3F8	nop
        801DF3FC	j      L1df410 [$801df410]
        801DF400	nop

        L1df404:	; 801DF404
        A0 = S7;
        801DF404	jal    func1df6f0 [$801df6f0]
        A0 = V0;

        L1df410:	; 801DF410
        if (A0 != 0)
        {
            [A0 + 0] = b(1);
            [A0 + 1] = b(bu[SP + 8c]);
            [A0 + 2] = b(S5 + 3);
            [A0 + 3] = b(bu[SP + 90]);
            [A0 + 4] = h(hu[S0 - 18]);
            [A0 + 6] = h(hu[S0 - 14]);
            [A0 + 8] = h(hu[S0 - 10]);

            if (S5 != 0)
            {
                [A0 + a] = h(S2);
                [A0 + c] = h(S3);
                [A0 + e] = h(S4);
            }
            else
            {
                [A0 + a] = h(S2 - hu[S0 - 18]);
                [A0 + c] = h(S3 - hu[S0 - 14]);
                [A0 + e] = h(S4 - hu[S0 - 10]);
            }

            [A0 + 10] = h(0);
            [A0 + 12] = h(hu[SP + 10]);
            [S0 + 0] = w(A0);
            801DF4AC	j      L1df4e0 [$801df4e0]
        }

        L1df4b4:	; 801DF4B4
        A1 = w[S0 + 0];
        if (A1 != 0 && bu[A1 + 3] != FP)
        {
            A0 = S7;
            801DF4D4	jal    func1df7a8 [$801df7a8]

            [S0 + 0] = w(0);
        }

        L1df4e0:	; 801DF4E0
        S6 = S6 + 1;
        V0 = S6 < hu[SP + 38];
    801DF4EC	bne    v0, zero, L1df17c [$801df17c]
}
////////////////////////////////




////////////////////////////////
// func1e6910
// get pointer to animation file 2202_0_0_0 - 2202_0_0_X
param = A1 & ff;
[A2 + 0] = w(0);
if (param >= fe)
{
    V0 = bu[A0 + 2a];
    param = V0 & 7f;
    [A2] = w(V0 & 80);
}

param = param & ff;
if (param >= 40)
{
    V1 = w[A0 + 18];
    V0 = w[V1 - fc + param * 4];
}
else
{
    V1 = w[A0 + 14];
    V0 = w[V1 + 4 + param * 4];
}
////////////////////////////////



////////////////////////////////
// func1e632c
[A0 + 98] = h(-1);
////////////////////////////////



////////////////////////////////
// func1dfe8c
S2 = A0;
bone_struct = A1;
number_of_bones = hu[bone_struct + a];
if (number_of_bones == 0)
{
    return;
}

S1 = 0;
loop1dfec4:	; 801DFEC4
    A1 = w[bone_struct + S1 * 7c + 70];
    if (A1 != 0 && b[A1 + 3] != -1)
    {
        A0 = S2;
        func1df7a8;

        [bone_struct + S1 * 7c + 70] = w(0);
    }

    A1 = w[bone_struct + S1 * 7c + 74];
    if (A1 != 0 && b[A1 + 3] != -1)
    {
        A0 = S2;
        func1df7a8;

        [bone_struct + S1 * 7c + 74] = w(0);
    }

    A1 = w[bone_struct + S1 * 7c + 78];
    if (A1 != 0 && b[A1 + 3] != -1)
    {
        A0 = S2;
        func1df7a8;

        [bone_struct + S1 * 7c + 70] = w(0);
    }

    S1 = S1 + 1;
    V0 = S1 < number_of_bones;
801DFF4C	bne    v0, zero, loop1dfec4 [$801dfec4]
////////////////////////////////



////////////////////////////////
// func1df52c
//            A0 = w[SP + c8]; // 801e86a8
//            A1 = w[S4 + 4]; // pointer to allocated place for skeleton 0x7c
//            A3 = 7;

S2 = A0;
skelepon_pointer = A1;
bone_id = A2;
flags = A3;

if (bone_id < hu[skelepon_pointer + a])
{
    bone_pointer = skelepon_pointer + bone_id * 7c;
    A1 = w[bone_pointer + 70];
    if (A1 != 0 && flags & 1)
    {
        A0 = S2;
        func1df7a8;
        [bone_pointer + 70] = w(0);
    }

    A1 = w[bone_pointer + 74];
    if (A1 != 0 && flags & 2)
    {
        A0 = S2;
        func1df7a8;
        [bone_pointer + 74] = w(0);
    }

    A1 = w[bone_pointer + 78];
    if (A1 != 0 && flags & 4)
    {
        A0 = S2;
        func1df7a8;
        [bone_pointer + 78] = w(0);
    }
}
////////////////////////////////



////////////////////////////////
// func1df7a8
if (A1 == 0)
{
    return -1;
}

V1 = (A1 - w[A0 + 0]) / 14;

if (V1 < hu[A0 + 4])
{
    [A0 + 4] = h(V1);
}

[A1 + 0] = b(0);

return V1;
////////////////////////////////